using FantasyModuleParser.Equipment.Models;
using FantasyModuleParser.Main.Models;
using FantasyModuleParser.NPC;
using FantasyModuleParser.Spells.Models;
using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace FantasyModuleParser.Exporters
{
	public class DatabaseExporter
	{
        public static void DatabaseXML(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel, SpellModel spellModel)
		{
			xmlWriter.WriteStartDocument();
			DatabaseXML_Comments(xmlWriter);
			DatabaseXML_Root(xmlWriter, module, npcModel, spellModel);
			xmlWriter.WriteEndDocument();
			xmlWriter.Close();
		}

		private static void DatabaseXML_Comments(XmlWriter xmlWriter)
		{
			xmlWriter.WriteComment("Generated by Fantasy Module Parser");
			xmlWriter.WriteComment("Written by Theodore Story, Darkpool, and Battlemarch (c) 2021");
		}

		private static void DatabaseXML_Root(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel, SpellModel spellModel)
		{
			xmlWriter.WriteStartElement("root"); // <root>
			xmlWriter.WriteAttributeString("version", "4.0"); /* <root version="4.0"> */
			DatabaseXML_Root_Image(xmlWriter, module, npcModel);
			ReferenceExporter.DatabaseXML_Root_Reference(xmlWriter, module, npcModel, spellModel);
			LibraryExporter.Database_Library(xmlWriter, module);
			xmlWriter.WriteEndElement(); // Closes </root>
		}

		private static void DatabaseXML_Root_Image(XmlWriter xmlWriter, ModuleModel module, NPCModel npc)
		{
			if (module.IncludeImages)
			{
				xmlWriter.WriteStartElement("image"); /* <root version="4.0"> <image> */
				Image_Category(xmlWriter, module, npc);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> </image> */
			}
		}

		private static void Image_Category(XmlWriter xmlWriter, ModuleModel module, NPCModel npc)
		{
			foreach (CategoryModel category in module.Categories)
			{
				xmlWriter.WriteStartElement("category"); /* <root version="4.0"> <image> <category> */
				xmlWriter.WriteAttributeString("name", category.Name); /* <root version="4.0"> <image> <category> */
				xmlWriter.WriteAttributeString("baseicon", "0");
				xmlWriter.WriteAttributeString("decalicon", "0");
				Image_Category_ImageName(xmlWriter, category, npc);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> </category> */
			}
		}

		private static void Image_Category_ImageName(XmlWriter xmlWriter, CategoryModel category, NPCModel npcModel)
		{
			foreach (NPCModel npc in category.NPCModels)
			{
				if (!string.IsNullOrEmpty(npcModel.NPCImage))
				{
					xmlWriter.WriteStartElement(Path.GetFileNameWithoutExtension(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
					/* <root version="4.0"> <image> <category> <image_name> */
					Image_Category_ImageName_Image(xmlWriter, npcModel);
					CommonMethods.WriteModuleLocked(xmlWriter);
					NPCExporter.WriteName(xmlWriter, npcModel);
					Image_Category_ImageName_Image_NonidName(xmlWriter, npcModel);
					Image_Category_ImageName_Image_Identified(xmlWriter, npcModel);
					xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> </image_name> */
				}
			}
		}

		private static void Image_Category_ImageName_Image_Identified(XmlWriter xmlWriter, NPCModel npcModel)
		{
			if (!string.IsNullOrEmpty(npcModel.NonID))
			{
				xmlWriter.WriteStartElement("isidentified"); /* <root version="4.0"> <image> <category> <image_name> <isidentified> */
				xmlWriter.WriteAttributeString("type", "number");
				xmlWriter.WriteString("0");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <isidentified> </isidentified> */
			}
		}

		private static void Image_Category_ImageName_Image_NonidName(XmlWriter xmlWriter, NPCModel npcModel)
		{
			if (!string.IsNullOrEmpty(npcModel.NonID))
			{
				xmlWriter.WriteStartElement("nonid_name"); /* <root version="4.0"> <image> <category> <image_name> <nonid_name> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString(npcModel.NonID);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <nonid_name> </nonid_name> */
			}
		}

		private static void Image_Category_ImageName_Image(XmlWriter xmlWriter, NPCModel npcModel)
		{
			xmlWriter.WriteStartElement("image"); /* <root version="4.0"> <image> <category> <image_name> <image> */
			xmlWriter.WriteAttributeString("type", "image");
			Image_Category_ImageName_Image_Bitmap(xmlWriter, npcModel);
			xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <image> </image> */
		}

		private static void Image_Category_ImageName_Image_Bitmap(XmlWriter xmlWriter, NPCModel npcModel)
		{
			xmlWriter.WriteStartElement("bitmap"); /* <root version="4.0"> <image> <category> <image_name> <image> <bitmap> */
			xmlWriter.WriteAttributeString("type", "string");
			xmlWriter.WriteString("images" + "\\" + Path.GetFileName(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
			xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <image> <bitmap> </bitmap> */
		}
	}
}
