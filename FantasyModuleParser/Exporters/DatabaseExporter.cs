using FantasyModuleParser.Equipment.Models;
using FantasyModuleParser.Main.Models;
using FantasyModuleParser.NPC;
using System.Collections.Generic;
using System.Xml;

namespace FantasyModuleParser.Exporters
{
	public class DatabaseExporter
	{
        public static void DatabaseXML(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel, List<EquipmentModel> FatEquipmentList)
		{
			xmlWriter.WriteStartDocument();
			DatabaseXML_Comments(xmlWriter);
			DatabaseXML_Root(xmlWriter, module, npcModel, FatEquipmentList);
			xmlWriter.WriteEndDocument();
			xmlWriter.Close();
			return sw.ToString();
		}

		private static void DatabaseXML_Comments(XmlWriter xmlWriter)
		{
			xmlWriter.WriteComment("Generated by Fantasy Module Parser");
			xmlWriter.WriteComment("Written by Theodore Story, Darkpool, and Battlemarch (c) 2021");
		}

		private static void DatabaseXML_Root(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel, List<EquipmentModel> FatEquipmentList)
		{
			xmlWriter.WriteStartElement("root"); // <root>
			xmlWriter.WriteAttributeString("version", "4.0"); /* <root version="4.0"> */
			DatabaseXML_Root_Image(xmlWriter, module, npcModel);
			ReferenceExporter.DatabaseXML_Root_Reference(xmlWriter, module, FatEquipmentList);

			if (moduleModel.IncludeImages)
			{
				#region Image Lists
				xmlWriter.WriteStartElement("imagelists"); /* <root version="4.0"> <reference> <imagelists> */
				xmlWriter.WriteStartElement("bycategory"); /* <root version="4.0"> <reference> <imagelists> <bycategory> */
				xmlWriter.WriteStartElement("description"); /* <root version="4.0"> <reference> <imagelists> <bycategory> <description> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("Images");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <imagelists> <bycategory> <description> </description>*/
				xmlWriter.WriteStartElement("groups"); /* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> */
				foreach (CategoryModel categoryModel in moduleModel.Categories)
				{
					xmlWriter.WriteStartElement(CategoryNameToXML(categoryModel));
					/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> */
					xmlWriter.WriteStartElement("description");
					/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <description> */
					xmlWriter.WriteAttributeString("type", "string");
					xmlWriter.WriteString(categoryModel.Name);
					xmlWriter.WriteEndElement();
					/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <description> </description> */
					xmlWriter.WriteStartElement("index"); /* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> */
					foreach (NPCModel npcModel in categoryModel.NPCModels)
					{
						if (!string.IsNullOrEmpty(npcModel.NPCImage))
						{
							xmlWriter.WriteStartElement(Path.GetFileNameWithoutExtension(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> */
							xmlWriter.WriteStartElement("link");
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link> */
							xmlWriter.WriteAttributeString("type", "windowreference");
							xmlWriter.WriteStartElement("class");
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link> <class> */
							xmlWriter.WriteString("imagewindow");
							xmlWriter.WriteEndElement();
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link> <class>
                             * </class>*/
							xmlWriter.WriteStartElement("recordname");
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link>
                             * <recordname> */
							xmlWriter.WriteString("image." + Path.GetFileNameWithoutExtension(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
							xmlWriter.WriteEndElement();
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link>
                             * <recordname> </recordname>*/
							xmlWriter.WriteStartElement("description");
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link>
                             * <description> */
							xmlWriter.WriteStartElement("field");
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link>
                             * <description> <field> */
							xmlWriter.WriteString("name");
							xmlWriter.WriteEndElement();
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link>
                             * <description> <field> </field> */
							xmlWriter.WriteEndElement();
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link>
                             * <description> </description> */
							xmlWriter.WriteEndElement();
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <link> </link> */
							xmlWriter.WriteStartElement("source");
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <source> */
							xmlWriter.WriteAttributeString("type", "string");
							xmlWriter.WriteEndElement();
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> <source> </source> */
							xmlWriter.WriteEndElement();
							/* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> <image_name> </image_name> */
						}
					}
					xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> <index> </index> */
					xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> <category> </category> */
				}
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <imagelists> <bycategory> <groups> </groups> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <imagelists> <bycategory> </bycategory> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <imagelists> </imagelists> */
				#endregion
			}
			if (moduleModel.IncludeNPCs)
			{
				#region NPC Lists
				xmlWriter.WriteStartElement("npclists"); /* <root version="4.0"> <reference> <npclists> */
				xmlWriter.WriteStartElement("npcs"); /* <root version="4.0"> <reference> <npclists> <npcs> */
				xmlWriter.WriteStartElement("name"); /* <root version="4.0"> <reference> <npclists> <npcs> <name> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("NPCs");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <npcs> <name> </name> */
				xmlWriter.WriteStartElement("index"); /* <root version="4.0"> <reference> <npclists> <npcs> <index> */
				WriteIDLinkList(xmlWriter, moduleModel, "id-0001", "reference.npclists.byletter@" + moduleModel.Name, "NPCs - Alphabetical Index");
				WriteIDLinkList(xmlWriter, moduleModel, "id-0002", "reference.npclists.bylevel@" + moduleModel.Name, "NPCs - Challenge Rating Index");
				WriteIDLinkList(xmlWriter, moduleModel, "id-0003", "reference.npclists.bytype@" + moduleModel.Name, "NPCs - Class Index");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <npcs> <index> </index> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <npcs> </npcs> */
				xmlWriter.WriteStartElement("byletter"); /* <root version="4.0"> <reference> <npclists> <byletter> */
				xmlWriter.WriteStartElement("description"); /* <root version="4.0"> <reference> <npclists> <byletter> <description> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("NPCs");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <byletter> <description> </description> */
				xmlWriter.WriteStartElement("groups"); /* <root version="4.0"> <reference> <npclists> <byletter> <groups> */
				NPCExporter.CreateReferenceByFirstLetter(xmlWriter, moduleModel, FatNPCList);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <byletter> <groups> </groups> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <byletter> </byletter> */
				xmlWriter.WriteStartElement("bylevel"); /* <root version="4.0"> <reference> <npclists> <bylevel> */
				xmlWriter.WriteStartElement("description"); /* <root version="4.0"> <reference> <npclists> <bylevel> <description> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("NPCs");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <bylevel> <description> </description> */
				xmlWriter.WriteStartElement("groups"); /* <root version="4.0"> <reference> <npclists> <bylevel> <groups> */
				NPCExporter.CreateReferenceByCR(xmlWriter, moduleModel, FatNPCList);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <bylevel> <groups> </groups> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <bylevel> </bylevel> */
				xmlWriter.WriteStartElement("bytype"); /* <root version="4.0"> <reference> <npclists> <bytype> */
				xmlWriter.WriteStartElement("description"); /* <root version="4.0"> <reference> <npclists> <bytype> <description> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("NPCs");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <bytype> <description> </description> */
				xmlWriter.WriteStartElement("groups"); /* <root version="4.0"> <reference> <npclists> <bytype> <groups> */
				NPCExporter.CreateReferenceByType(xmlWriter, moduleModel, FatNPCList);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <bytype> <groups> </groups> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> <bytype> </bytype> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <npclists> </npclists> */
				#endregion
			}
			if (moduleModel.IncludeSpells)
			{
				#region Spell Lists
				xmlWriter.WriteStartElement("spelllists"); /* <root version="4.0"> <reference> <spelllists> */
				xmlWriter.WriteStartElement("spells"); /* <root version="4.0"> <reference> <spelllists> <spells> */
				xmlWriter.WriteStartElement("name"); /* <root version="4.0"> <reference> <spelllists> <spells> <name> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("Spells");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <spelllists> <spells> <name> </name> */
				xmlWriter.WriteStartElement("index"); /* <root version="4.0"> <reference> <spelllists> <spells> <index> */
				WriteIDLinkList(xmlWriter, moduleModel, "id-0001", "reference.spelllists._index_@" + moduleModel.Name, "(Index)");
				int spellListId = 2;
				foreach (string castByValue in SpellExporter.GetSortedSpellCasterList(moduleModel))
				{
					string referenceId = "reference.spellists.";
					referenceId += castByValue.Replace(" ", "").Replace("(", "").Replace(")", "").ToLower();
					referenceId += "@" + moduleModel.Name;
					WriteIDLinkList(xmlWriter, moduleModel, "id-" + spellListId.ToString("D4"), referenceId, castByValue);

					spellListId++;
				}
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <spelllists> <spells> <index> <text> </text> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <spelllists> <spells> <index> </index> */

				#region Spell Index
				xmlWriter.WriteStartElement("_index_"); /* <root version="4.0"> <reference> <spelllists> <spells> <_index_> */
				xmlWriter.WriteStartElement("description"); /* <root version="4.0"> <reference> <spelllists> <spells> <_index_> <description> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("Spell Index");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <spelllists> <spells> <_index_> <description> </description> */
				xmlWriter.WriteStartElement("groups"); /* <root version="4.0"> <reference> <spelllists> <spells> <_index_> <groups> */
				SpellExporter.CreateSpellReferenceByFirstLetter(xmlWriter, moduleModel, FatSpellList);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <spelllists> <spells> <_index_> <groups> </groups> */
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <reference> <spelllists> <spells> <_index_> </index> */
				#endregion
				SpellExporter.SpellListByClass(xmlWriter, moduleModel);
				xmlWriter.WriteEndElement(); // Close </spelllists>
				#endregion
			}
			if (moduleModel.IncludeTables)
			{
				#region Tables Data
				xmlWriter.WriteStartElement("tables"); /* <root> <reference> <tables> */
				foreach (CategoryModel categoryModel in moduleModel.Categories)
				{
					xmlWriter.WriteStartElement("category"); /* <root> <reference> <tables> <category> */
					xmlWriter.WriteAttributeString("name", categoryModel.Name);
					xmlWriter.WriteAttributeString("baseicon", "0");
					xmlWriter.WriteAttributeString("decalicon", "0");

					//Now, write out each NPC with NPC Name
					foreach (TableModel tableModel in FatTableList)
					{
						xmlWriter.WriteStartElement(TableExporter.TableNameToXMLFormat(tableModel));
						/* <root> <reference> <tables> <category> <tableModel.Name> */
						TableExporter.WriteTableLocked(xmlWriter, tableModel);
						TableExporter.WriteTableName(xmlWriter, tableModel);
						TableExporter.WriteTableDescription(xmlWriter, tableModel);
						TableExporter.WriteTableOutput(xmlWriter, tableModel);
						TableExporter.WriteTableNotes(xmlWriter, tableModel);
						TableExporter.WriteTableHideRolls(xmlWriter, tableModel);
						TableExporter.WriteTableRollModifier(xmlWriter, tableModel);
						TableExporter.WriteTableRollDice(xmlWriter, tableModel);
						TableExporter.WriteColumnLabels(xmlWriter, tableModel);
						TableExporter.WriteResultsColumn(xmlWriter, tableModel);
						xmlWriter.WriteEndElement(); /* <root> <reference> <tables> <category> <tableModel.Name> </tableModel.Name>*/
					}
					xmlWriter.WriteEndElement(); /* <root> <reference> <tables> <category> </category>*/
				}
				xmlWriter.WriteEndElement(); /* <root> <reference> <tables> </tables>*/
				#endregion
			}

			#region Reference Manual
			xmlWriter.WriteStartElement("referencemanual");  /* <root> <reference> <referencemanual */
			xmlWriter.WriteStartElement("name"); /* <root> <reference> <referencemanual <name> */
			xmlWriter.WriteAttributeString("type", "string");
			xmlWriter.WriteString(moduleModel.Name);
			xmlWriter.WriteEndElement(); /* <root> <reference> <referencemanual <name> </name> */
			xmlWriter.WriteStartElement("chapters"); /* <root> <reference> <referencemanual <chapters> */
			xmlWriter.WriteStartElement("chapter_00"); /* <root> <reference> <referencemanual <chapters> <chapter_00> */
			xmlWriter.WriteStartElement("name"); /* <root> <reference> <referencemanual <chapters> <chapter_00> <name> */
			xmlWriter.WriteAttributeString("type", "string");
			xmlWriter.WriteString(moduleModel.Name);
			xmlWriter.WriteEndElement(); /* <root> <reference> <referencemanual <chapters> <chapter_00> <name> </name> */
			xmlWriter.WriteStartElement("subchapters"); /* <root> <reference> <referencemanual <chapters> <chapter_00> <subchapters> */
			int subchapterID = 0;
			#region NPC Reference Manual Section
			if (moduleModel.IncludeNPCs)
			{
				xmlWriter.WriteStartElement("subchapter_" + subchapterID.ToString("D2")); // open <subchapters> <subchapter_**>
				xmlWriter.WriteStartElement("name"); // open <subchapters> <subchapter_*> <name>
				xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
				xmlWriter.WriteString("NPCs");
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteStartElement("refpages"); // open <refpages>
				xmlWriter.WriteStartElement("id-0001"); // open <refpages> <a1>
				xmlWriter.WriteStartElement("blocks"); // open <refpages> <a1> <blocks>
				xmlWriter.WriteStartElement("id-0001"); // open <refpages> <a1> <blocks> <id-0001>
				WriteBlockFormatting(xmlWriter);
				xmlWriter.WriteStartElement("p");
				xmlWriter.WriteString("The following NPCs are able to be found in " + moduleModel.Name + ".");
				xmlWriter.WriteStartElement("linklist");
				FatNPCList.Sort((npcOne, npcTwo) => npcOne.NPCName.CompareTo(npcTwo.NPCName));
				foreach (NPCModel npcModel in FatNPCList)
				{
					xmlWriter.WriteStartElement("link");
					xmlWriter.WriteAttributeString("class", "npc");
					xmlWriter.WriteAttributeString("recordname", WriteRecordNameNPC(npcModel));
					xmlWriter.WriteString(npcModel.NPCName);
					xmlWriter.WriteEndElement();
				}
				xmlWriter.WriteEndElement(); // close </linklist>
				xmlWriter.WriteEndElement(); // close </p>
				xmlWriter.WriteEndElement(); // close </text>
				xmlWriter.WriteEndElement(); // close </id-0001>
				xmlWriter.WriteEndElement(); // close </blocks>
				WriteListLink(xmlWriter);
				xmlWriter.WriteStartElement("name"); // open <name>
				xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
				xmlWriter.WriteString(moduleModel.Name + " NPCs"); // <name type=string> * NPCs
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteEndElement(); // close </id-0001>
				FatNPCList.Sort((npcOne, npcTwo) => npcOne.NPCName.CompareTo(npcTwo.NPCName));
				int npcID = 2;
				foreach (NPCModel npcModel in FatNPCList)
				{
					NPCController npcController = new NPCController();
					xmlWriter.WriteStartElement("id-" + npcID.ToString("D4")); // <open id-****>
					xmlWriter.WriteStartElement("blocks"); // <npc_name> <blocks>
					xmlWriter.WriteStartElement("id-0001"); // <npc_name> <blocks> <id-0001>
					WriteBlockFormatting(xmlWriter);
					if (!string.IsNullOrEmpty(npcModel.Description) && npcModel.Description.Length > 2)
					{
						xmlWriter.WriteRaw(npcController.GenerateFantasyGroundsDescriptionXML(npcModel.Description));
					}
					else
					{
						xmlWriter.WriteStartElement("p"); // <p>
						xmlWriter.WriteEndElement(); // </p>
					}
					if (npcModel.NPCImage.Length > 2)
					{
						xmlWriter.WriteStartElement("link");  // <link>
						xmlWriter.WriteAttributeString("class", "imagewindow"); // <link class="imagewindow">
						xmlWriter.WriteAttributeString("recordname", WriteImageXML(npcModel)); // <link class="imagewindow" recordname="image.*">
						xmlWriter.WriteStartElement("b"); // <b>
						xmlWriter.WriteString("Image:");
						xmlWriter.WriteEndElement(); // </b>
						xmlWriter.WriteEndElement(); // </link>
						xmlWriter.WriteString(npcModel.NPCName);
					}
					xmlWriter.WriteStartElement("link");  // <link>
					xmlWriter.WriteAttributeString("class", "npc"); // <link class="npc">
					xmlWriter.WriteAttributeString("recordname", WriteRecordNameNPC(npcModel)); // <link class="npc" recordname="reference.npcdata.*">
					xmlWriter.WriteStartElement("b"); // <b>
					xmlWriter.WriteString("NPC:");
					xmlWriter.WriteEndElement(); // </b>
					xmlWriter.WriteEndElement(); // </link>
					xmlWriter.WriteString(npcModel.NPCName);
					xmlWriter.WriteEndElement(); // </text>
					xmlWriter.WriteEndElement(); // </id-0001>
					xmlWriter.WriteEndElement(); // </blocks>
					WriteListLink(xmlWriter);
					xmlWriter.WriteStartElement("name"); // open <name>
					xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
					xmlWriter.WriteString(npcModel.NPCName); // <name type=string> NPC Name
					xmlWriter.WriteEndElement(); // close </name>
					xmlWriter.WriteEndElement(); // </id-****>
					npcID = ++npcID;
				}
				xmlWriter.WriteEndElement(); // close </refpages>
				xmlWriter.WriteEndElement(); // close </subchapter_**>
				subchapterID = ++subchapterID;
			}
			#endregion
			#region Spell Reference Manual Section
			if (moduleModel.IncludeSpells)
			{
				xmlWriter.WriteStartElement("subchapter_" + subchapterID.ToString("D2")); // open <subchapters> <subchapter_**>
				xmlWriter.WriteStartElement("name"); // open <subchapters> <subchapter_*> <name>
				xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
				xmlWriter.WriteString("Spells");
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteStartElement("refpages"); // open <refpages>
				xmlWriter.WriteStartElement("id-0001"); // open <refpages> <a1>
				xmlWriter.WriteStartElement("blocks"); // open <refpages> <a1> <blocks>
				xmlWriter.WriteStartElement("id-0001"); // open <refpages> <a1> <blocks> <id-0001>
				WriteBlockFormatting(xmlWriter);
				xmlWriter.WriteStartElement("p");
				xmlWriter.WriteString("The following Spells are able to be found in " + moduleModel.Name + ".");
				xmlWriter.WriteStartElement("linklist");
				FatSpellList.Sort((spellOne, spellTwo) => spellOne.SpellName.CompareTo(spellTwo.SpellName));
				foreach (SpellModel spellModel in FatSpellList)
				{
					xmlWriter.WriteStartElement("link");
					xmlWriter.WriteAttributeString("class", "power");
					xmlWriter.WriteAttributeString("recordname", WriteRecordNameSpell(spellModel));
					xmlWriter.WriteString(spellModel.SpellName);
					xmlWriter.WriteEndElement();
				}
				xmlWriter.WriteEndElement(); // close </linklist>
				xmlWriter.WriteEndElement(); // close </p>
				xmlWriter.WriteEndElement(); // close </text>
				xmlWriter.WriteEndElement(); // close </id-0001>
				xmlWriter.WriteEndElement(); // close </blocks>
				WriteListLink(xmlWriter);
				xmlWriter.WriteStartElement("name"); // open <name>
				xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
				xmlWriter.WriteString(moduleModel.Name + " Spells"); // <name type=string> * Spells
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteEndElement(); // close </id-0001>
				FatSpellList.Sort((spellOne, spellTwo) => spellOne.SpellName.CompareTo(spellTwo.SpellName));
				int spellID = 2;
				foreach (SpellModel spellModel in FatSpellList)
				{
					NPCController npcController = new NPCController();
					xmlWriter.WriteStartElement("id-" + spellID.ToString("D4")); // <open id-****>
					xmlWriter.WriteStartElement("blocks"); // <npc_name> <blocks>
					xmlWriter.WriteStartElement("id-0001"); // <npc_name> <blocks> <id-0001>
					WriteBlockFormatting(xmlWriter);
					xmlWriter.WriteRaw("<p><h>"); // <p><h>
					xmlWriter.WriteString(spellModel.SpellName);
					xmlWriter.WriteRaw("</h></p><p><i>"); // </h></p><p><i>
					if (spellModel.SpellLevel.GetDescription().Equals("cantrip"))
					{
						xmlWriter.WriteString(spellModel.SpellSchool + " cantrip");
					}
					else
					{
						xmlWriter.WriteString(spellModel.SpellLevel.GetDescription() + "-level " + spellModel.SpellSchool);
						if (spellModel.IsRitual.Equals(1))
						{
							xmlWriter.WriteString(" (ritual)");
						}
					}
					xmlWriter.WriteRaw("</i></p><p><b>");
					xmlWriter.WriteString("Casting Time:");
					xmlWriter.WriteRaw("</b>");
					xmlWriter.WriteString(" " + spellModel.CastingTime + " " + spellModel.CastingType.GetDescription());
					if (spellModel.CastingTime > 1)
					{
						xmlWriter.WriteString("s");
					}
					xmlWriter.WriteRaw("</p><p><b>");
					xmlWriter.WriteString("Range:");
					xmlWriter.WriteRaw("</b>");
					xmlWriter.WriteString(" " + spellModel.RangeDescription);
					xmlWriter.WriteRaw("</p><p><b>");
					xmlWriter.WriteString("Components:");
					xmlWriter.WriteRaw("</b>");
					xmlWriter.WriteString(" " + spellModel.ComponentDescription);
					xmlWriter.WriteRaw("</p><p><b>");
					xmlWriter.WriteString("Duration:");
					xmlWriter.WriteRaw("</b>");
					xmlWriter.WriteString(" " + spellModel.DurationText);
					xmlWriter.WriteRaw("</p>");
					xmlWriter.WriteRaw(npcController.GenerateFantasyGroundsDescriptionXML(spellModel.Description) + "<p>");
					xmlWriter.WriteStartElement("link");  // <link>
					xmlWriter.WriteAttributeString("class", "power"); // <link class="power">
					xmlWriter.WriteAttributeString("recordname", WriteRecordNameSpell(spellModel)); // <link class="power" recordname="reference.spelldata.*">
					xmlWriter.WriteRaw("<b>"); // <b>
					xmlWriter.WriteString("Spell:");
					xmlWriter.WriteRaw("</b>"); // </b>
					xmlWriter.WriteEndElement(); // </link>
					xmlWriter.WriteString(spellModel.SpellName);
					xmlWriter.WriteRaw("</p>"); // </p>
					xmlWriter.WriteEndElement(); // </text>
					xmlWriter.WriteEndElement(); // </id-0001>
					xmlWriter.WriteEndElement(); // </blocks>
					WriteListLink(xmlWriter);
					xmlWriter.WriteStartElement("name"); // open <name>
					xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
					xmlWriter.WriteString(spellModel.SpellName); // <name type=string> NPC Name
					xmlWriter.WriteEndElement(); // close </name>
					xmlWriter.WriteEndElement(); // </id-****>
					spellID = ++spellID;
				}
				xmlWriter.WriteEndElement(); // </subchapter_**>
				subchapterID = ++subchapterID;
			}
			#endregion
			#region Equipment Reference Manual Section
			if (moduleModel.IncludesEquipment)
			{
				xmlWriter.WriteStartElement("subchapter_" + subchapterID.ToString("D2")); // open <subchapters> <subchapter_**>
				xmlWriter.WriteStartElement("name"); // open <subchapters> <subchapter_*> <name>
				xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
				xmlWriter.WriteString("Equipment");
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteStartElement("refpages"); // open <refpages>
				xmlWriter.WriteStartElement("id-0001"); // open <refpages> <a1>
				xmlWriter.WriteStartElement("blocks"); // open <refpages> <a1> <blocks>
				xmlWriter.WriteStartElement("id-0001"); // open <refpages> <a1> <blocks> <id-0001>
				WriteBlockFormatting(xmlWriter);
				xmlWriter.WriteStartElement("p");
				xmlWriter.WriteString("The following Equipment are able to be found in " + moduleModel.Name + ".");
				xmlWriter.WriteStartElement("linklist");
				FatEquipmentList.Sort((equipOne, equipTwo) => equipOne.Name.CompareTo(equipTwo.Name));
				foreach (EquipmentModel equipmentModel in FatEquipmentList)
				{
					xmlWriter.WriteStartElement("link");
					xmlWriter.WriteAttributeString("class", "item");
					xmlWriter.WriteAttributeString("recordname", WriteRecordNameEquipment(equipmentModel));
					xmlWriter.WriteString(equipmentModel.Name);
					xmlWriter.WriteEndElement();
				}
				xmlWriter.WriteEndElement(); // close </linklist>
				xmlWriter.WriteEndElement(); // close </p>
				xmlWriter.WriteEndElement(); // close </text>
				xmlWriter.WriteEndElement(); // close </id-0001>
				xmlWriter.WriteEndElement(); // close </blocks>
				WriteListLink(xmlWriter);
				xmlWriter.WriteStartElement("name"); // open <name>
				xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
				xmlWriter.WriteString(moduleModel.Name + " Equipment"); // <name type=string> * Equipment
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteEndElement(); // close </id-0001>
				FatEquipmentList.Sort((equipOne, equipTwo) => equipOne.Name.CompareTo(equipTwo.Name));
				int equipID = 2;
				foreach (EquipmentModel equipmentModel in FatEquipmentList)
				{
					NPCController npcController = new NPCController();
					xmlWriter.WriteStartElement("id-" + equipID.ToString("D4")); // <open id-****>
					xmlWriter.WriteStartElement("blocks"); // <npc_name> <blocks>
					xmlWriter.WriteStartElement("id-0001"); // <npc_name> <blocks> <id-0001>
					WriteBlockFormatting(xmlWriter);
					xmlWriter.WriteRaw("<p><h>"); // <p><h>
					xmlWriter.WriteString(equipmentModel.Name);
					xmlWriter.WriteRaw("</h></p><p><i>"); // </h></p><p><i>
					if (string.IsNullOrEmpty(equipmentModel.Description))
					{
					}
					else
					{
						xmlWriter.WriteRaw(npcController.GenerateFantasyGroundsDescriptionXML(equipmentModel.Description));
					}
					xmlWriter.WriteRaw("</i></p><p>");
					xmlWriter.WriteStartElement("link");  // <link>
					xmlWriter.WriteAttributeString("class", "item"); // <link class="power">
					xmlWriter.WriteAttributeString("recordname", WriteRecordNameEquipment(equipmentModel)); // <link class="power" recordname="reference.spelldata.*">
					xmlWriter.WriteRaw("<b>"); // <b>
					xmlWriter.WriteString("Item:");
					xmlWriter.WriteRaw("</b>"); // </b>
					xmlWriter.WriteEndElement(); // </link>
					xmlWriter.WriteString(equipmentModel.Name);
					xmlWriter.WriteRaw("</p>"); // </p>
					xmlWriter.WriteEndElement(); // </text>
					xmlWriter.WriteEndElement(); // </id-0001>
					xmlWriter.WriteEndElement(); // </blocks>
					WriteListLink(xmlWriter);
					xmlWriter.WriteStartElement("name"); // open <name>
					xmlWriter.WriteAttributeString("type", "string"); // <name type=string>
					xmlWriter.WriteString(equipmentModel.Name); // <name type=string> NPC Name
					xmlWriter.WriteEndElement(); // close </name>
					xmlWriter.WriteEndElement(); // </id-****>
					equipID = ++equipID;
				}
				xmlWriter.WriteEndElement(); // </subchapter_**>
				subchapterID = ++subchapterID;
			}
			#endregion
			xmlWriter.WriteEndElement(); // close </refpages>
			xmlWriter.WriteEndElement(); // close </chapter_**>
			xmlWriter.WriteEndElement(); // close </chapters>
			xmlWriter.WriteEndElement(); // Close </referencemanual>
			xmlWriter.WriteEndElement(); // Close </reference>
			#endregion




			#region Library
			// For the Blank DB XML unit test, need to check if any NPCs exist
			if (moduleModel.Categories != null && moduleModel.Categories.Count > 0)
			{
				xmlWriter.WriteStartElement("library");  /* <library> */
				xmlWriter.WriteStartElement(WriteLibraryNameLowerCase(moduleModel)); /* <library> <libname> */
				xmlWriter.WriteStartElement("name"); /* <library> <libname> <name> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString(moduleModel.Name + " Reference Library");
				xmlWriter.WriteEndElement(); /* <library> <libname> <name> </name> */
				xmlWriter.WriteStartElement("categoryname"); /* <library> <libname> <categoryname> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString(moduleModel.Category);
				xmlWriter.WriteEndElement();  /* <library> <libname> <categoryname> </categoryname> */
				xmlWriter.WriteStartElement("entries");
				int libraryID = 1;
				if (moduleModel.IncludeImages)
				{
					xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4")); /* <library> <libname> <r**images> */
					xmlWriter.WriteStartElement("librarylink"); /* <library> <libname> <r**images> <librarylink> */
					xmlWriter.WriteAttributeString("type", "windowreference");
					xmlWriter.WriteStartElement("class"); /* <library> <libname> <r**images> <librarylink> <class> */
					xmlWriter.WriteString("reference_colindex");
					xmlWriter.WriteEndElement();  /* <library> <libname> <r**images> <librarylink> <class> </class> */
					xmlWriter.WriteStartElement("recordname"); /* <library> <libname> <r**images> <librarylink> <recordname> */
					xmlWriter.WriteString("reference.imagelists.bycategory@" + moduleModel.Name);
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> <librarylink> <recordname> </recordname> */
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> <librarylink> </librarylink> */
					xmlWriter.WriteStartElement("name"); /* <library> <libname> <r**images> <name> */
					xmlWriter.WriteAttributeString("type", "string");
					xmlWriter.WriteString("Images");
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> <name> </name> */
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> </r**images> */
					libraryID = ++libraryID;
				}
				if (moduleModel.IncludeNPCs)
				{
					if (moduleModel.Categories[0].NPCModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4")); /* <library> <libname> <r**monsters> */
						xmlWriter.WriteStartElement("librarylink"); /* <library> <libname> <r**monsters> <librarylink> */
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class"); /* <library> <libname> <r**monsters> <librarylink> <class> */
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <librarylink> <class> </class> */
						xmlWriter.WriteStartElement("recordname"); /* <library> <libname> <r**monsters> <librarylink> <recordname> */
						xmlWriter.WriteString("reference.npclists.npcs@" + moduleModel.Name);
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <librarylink> <recordname> </recordname> */
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <librarylink> </librarylink> */
						xmlWriter.WriteStartElement("name"); /* <library> <libname> <r**monsters> <name> */
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("NPCs");
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <name> </name> */
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> </r**monsters> */
						libraryID = ++libraryID;
					}
				}
				if (moduleModel.IncludeSpells)
				{
					if (moduleModel.Categories[0].SpellModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
						xmlWriter.WriteStartElement("librarylink");
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class");
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("recordname");
						xmlWriter.WriteString("reference.spelllists.spells@" + moduleModel.Name);
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("name");
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("Spells");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						libraryID = ++libraryID;
					}
				}
				if (moduleModel.IncludeTables)
				{
					if (moduleModel.Categories[0].TableModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
						xmlWriter.WriteStartElement("librarylink");
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class");
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("recordname");
						xmlWriter.WriteString("reference.tables@" + moduleModel.Name);
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("name");
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("Tables");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						libraryID = ++libraryID;
					}
				}
				if (moduleModel.IncludesEquipment)
				{
					if (moduleModel.Categories[0].EquipmentModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
						xmlWriter.WriteStartElement("librarylink");
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class");
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("recordname");
						xmlWriter.WriteString("reference.equipmentlists.equipment@" + moduleModel.Name);
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("name");
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("Equipment");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						libraryID = ++libraryID;
					}
				}
				xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
				xmlWriter.WriteStartElement("librarylink");
				xmlWriter.WriteAttributeString("type", "windowreference");
				xmlWriter.WriteStartElement("class");
				xmlWriter.WriteString("reference_manual");
				xmlWriter.WriteEndElement();
				xmlWriter.WriteStartElement("recordname");
				xmlWriter.WriteString("reference.referencemanual@" + moduleModel.Name);
				xmlWriter.WriteEndElement(); // close </recordname>
				xmlWriter.WriteEndElement(); // close </librarylink>
				xmlWriter.WriteStartElement("name");
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("Reference Manual");
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteEndElement(); // close </r05referencemanual>
				xmlWriter.WriteEndElement();  // close entries                               
				xmlWriter.WriteEndElement();  // close libraryname                                                  
			}
			#endregion
			xmlWriter.WriteEndElement(); // Closes </root>
		}

		private static void DatabaseXML_Root_Image(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel)
		{
			if (module.IncludeImages)
			{
				xmlWriter.WriteStartElement("image"); /* <root version="4.0"> <image> */
				Image_Category(xmlWriter, module, npcModel);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> </image> */
			}
		}

		private static void Image_Category(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel)
		{
			foreach (CategoryModel category in module.Categories)
			{
				xmlWriter.WriteStartElement("category"); /* <root version="4.0"> <image> <category> */
				xmlWriter.WriteAttributeString("name", category.Name); /* <root version="4.0"> <image> <category> */
				xmlWriter.WriteAttributeString("baseicon", "0");
				xmlWriter.WriteAttributeString("decalicon", "0");
				Image_Category_ImageName(xmlWriter, category, npcModel);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> </category> */
			}
		}

		private static void Image_Category_ImageName(XmlWriter xmlWriter, CategoryModel category, NPCModel npcModel)
		{
			foreach (NPCModel npc in category.NPCModels)
			{
				if (!string.IsNullOrEmpty(npcModel.NPCImage))
				{
					xmlWriter.WriteStartElement(Path.GetFileNameWithoutExtension(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
					/* <root version="4.0"> <image> <category> <image_name> */
					Image_Category_ImageName_Image(xmlWriter, npcModel);
					CommonMethods.WriteModuleLocked(xmlWriter);
					NPCExporter.WriteName(xmlWriter, npcModel);
					Image_Category_ImageName_Image_NonidName(xmlWriter, npcModel);
					Image_Category_ImageName_Image_Identified(xmlWriter, npcModel);
					xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> </image_name> */
				}
			}
		}

		private static void Image_Category_ImageName_Image_Identified(XmlWriter xmlWriter, NPCModel npcModel)
		{
			if (!string.IsNullOrEmpty(npcModel.NonID))
			{
				xmlWriter.WriteStartElement("isidentified"); /* <root version="4.0"> <image> <category> <image_name> <isidentified> */
				xmlWriter.WriteAttributeString("type", "number");
				xmlWriter.WriteString("0");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <isidentified> </isidentified> */
			}
		}

		private static void Image_Category_ImageName_Image_NonidName(XmlWriter xmlWriter, NPCModel npcModel)
		{
			if (!string.IsNullOrEmpty(npcModel.NonID))
			{
				xmlWriter.WriteStartElement("nonid_name"); /* <root version="4.0"> <image> <category> <image_name> <nonid_name> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString(npcModel.NonID);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <nonid_name> </nonid_name> */
			}
		}

		private static void Image_Category_ImageName_Image(XmlWriter xmlWriter, NPCModel npcModel)
		{
			xmlWriter.WriteStartElement("image"); /* <root version="4.0"> <image> <category> <image_name> <image> */
			xmlWriter.WriteAttributeString("type", "image");
			Image_Category_ImageName_Image_Bitmap(xmlWriter, npcModel);
			xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <image> </image> */
		}

		private static void Image_Category_ImageName_Image_Bitmap(XmlWriter xmlWriter, NPCModel npcModel)
		{
			xmlWriter.WriteStartElement("bitmap"); /* <root version="4.0"> <image> <category> <image_name> <image> <bitmap> */
			xmlWriter.WriteAttributeString("type", "string");
			xmlWriter.WriteString("images" + "\\" + Path.GetFileName(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
			xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <image> <bitmap> </bitmap> */
		}
	}
}
