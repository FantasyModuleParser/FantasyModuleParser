using FantasyModuleParser.Equipment.Models;
using FantasyModuleParser.Main.Models;
using FantasyModuleParser.NPC;
using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace FantasyModuleParser.Exporters
{
	public class DatabaseExporter
	{
        public static void DatabaseXML(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel, List<EquipmentModel> FatEquipmentList, StringWriter sw)
		{
			xmlWriter.WriteStartDocument();
			DatabaseXML_Comments(xmlWriter);
			DatabaseXML_Root(xmlWriter, module, npcModel, FatEquipmentList);
			xmlWriter.WriteEndDocument();
			xmlWriter.Close();
		}

		private static void DatabaseXML_Comments(XmlWriter xmlWriter)
		{
			xmlWriter.WriteComment("Generated by Fantasy Module Parser");
			xmlWriter.WriteComment("Written by Theodore Story, Darkpool, and Battlemarch (c) 2021");
		}

		private static void DatabaseXML_Root(XmlWriter xmlWriter, ModuleModel module, NPCModel npcModel, List<EquipmentModel> FatEquipmentList)
		{
			xmlWriter.WriteStartElement("root"); // <root>
			xmlWriter.WriteAttributeString("version", "4.0"); /* <root version="4.0"> */
			DatabaseXML_Root_Image(xmlWriter, module, npcModel);
			ReferenceExporter.DatabaseXML_Root_Reference(xmlWriter, module, FatEquipmentList, npcModel);
		}




			#region Library
			// For the Blank DB XML unit test, need to check if any NPCs exist
			if (moduleModel.Categories != null && moduleModel.Categories.Count > 0)
			{
				xmlWriter.WriteStartElement("library");  /* <library> */
				xmlWriter.WriteStartElement(WriteLibraryNameLowerCase(moduleModel)); /* <library> <libname> */
				xmlWriter.WriteStartElement("name"); /* <library> <libname> <name> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString(moduleModel.Name + " Reference Library");
				xmlWriter.WriteEndElement(); /* <library> <libname> <name> </name> */
				xmlWriter.WriteStartElement("categoryname"); /* <library> <libname> <categoryname> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString(moduleModel.Category);
				xmlWriter.WriteEndElement();  /* <library> <libname> <categoryname> </categoryname> */
				xmlWriter.WriteStartElement("entries");
				int libraryID = 1;
				if (moduleModel.IncludeImages)
				{
					xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4")); /* <library> <libname> <r**images> */
					xmlWriter.WriteStartElement("librarylink"); /* <library> <libname> <r**images> <librarylink> */
					xmlWriter.WriteAttributeString("type", "windowreference");
					xmlWriter.WriteStartElement("class"); /* <library> <libname> <r**images> <librarylink> <class> */
					xmlWriter.WriteString("reference_colindex");
					xmlWriter.WriteEndElement();  /* <library> <libname> <r**images> <librarylink> <class> </class> */
					xmlWriter.WriteStartElement("recordname"); /* <library> <libname> <r**images> <librarylink> <recordname> */
					xmlWriter.WriteString("reference.imagelists.bycategory@" + moduleModel.Name);
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> <librarylink> <recordname> </recordname> */
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> <librarylink> </librarylink> */
					xmlWriter.WriteStartElement("name"); /* <library> <libname> <r**images> <name> */
					xmlWriter.WriteAttributeString("type", "string");
					xmlWriter.WriteString("Images");
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> <name> </name> */
					xmlWriter.WriteEndElement(); /* <library> <libname> <r**images> </r**images> */
					libraryID = ++libraryID;
				}
				if (moduleModel.IncludeNPCs)
				{
					if (moduleModel.Categories[0].NPCModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4")); /* <library> <libname> <r**monsters> */
						xmlWriter.WriteStartElement("librarylink"); /* <library> <libname> <r**monsters> <librarylink> */
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class"); /* <library> <libname> <r**monsters> <librarylink> <class> */
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <librarylink> <class> </class> */
						xmlWriter.WriteStartElement("recordname"); /* <library> <libname> <r**monsters> <librarylink> <recordname> */
						xmlWriter.WriteString("reference.npclists.npcs@" + moduleModel.Name);
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <librarylink> <recordname> </recordname> */
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <librarylink> </librarylink> */
						xmlWriter.WriteStartElement("name"); /* <library> <libname> <r**monsters> <name> */
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("NPCs");
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> <name> </name> */
						xmlWriter.WriteEndElement(); /* <library> <libname> <r**monsters> </r**monsters> */
						libraryID = ++libraryID;
					}
				}
				if (moduleModel.IncludeSpells)
				{
					if (moduleModel.Categories[0].SpellModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
						xmlWriter.WriteStartElement("librarylink");
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class");
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("recordname");
						xmlWriter.WriteString("reference.spelllists.spells@" + moduleModel.Name);
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("name");
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("Spells");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						libraryID = ++libraryID;
					}
				}
				if (moduleModel.IncludeTables)
				{
					if (moduleModel.Categories[0].TableModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
						xmlWriter.WriteStartElement("librarylink");
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class");
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("recordname");
						xmlWriter.WriteString("reference.tables@" + moduleModel.Name);
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("name");
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("Tables");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						libraryID = ++libraryID;
					}
				}
				if (moduleModel.IncludesEquipment)
				{
					if (moduleModel.Categories[0].EquipmentModels.Count > 0)
					{
						xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
						xmlWriter.WriteStartElement("librarylink");
						xmlWriter.WriteAttributeString("type", "windowreference");
						xmlWriter.WriteStartElement("class");
						xmlWriter.WriteString("referenceindex");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("recordname");
						xmlWriter.WriteString("reference.equipmentlists.equipment@" + moduleModel.Name);
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						xmlWriter.WriteStartElement("name");
						xmlWriter.WriteAttributeString("type", "string");
						xmlWriter.WriteString("Equipment");
						xmlWriter.WriteEndElement();
						xmlWriter.WriteEndElement();
						libraryID = ++libraryID;
					}
				}
				xmlWriter.WriteStartElement("id-" + libraryID.ToString("D4"));
				xmlWriter.WriteStartElement("librarylink");
				xmlWriter.WriteAttributeString("type", "windowreference");
				xmlWriter.WriteStartElement("class");
				xmlWriter.WriteString("reference_manual");
				xmlWriter.WriteEndElement();
				xmlWriter.WriteStartElement("recordname");
				xmlWriter.WriteString("reference.referencemanual@" + moduleModel.Name);
				xmlWriter.WriteEndElement(); // close </recordname>
				xmlWriter.WriteEndElement(); // close </librarylink>
				xmlWriter.WriteStartElement("name");
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString("Reference Manual");
				xmlWriter.WriteEndElement(); // close </name>
				xmlWriter.WriteEndElement(); // close </r05referencemanual>
				xmlWriter.WriteEndElement();  // close entries                               
				xmlWriter.WriteEndElement();  // close libraryname                                                  
			}
			#endregion
			xmlWriter.WriteEndElement(); // Closes </root>
		}

		private static void DatabaseXML_Root_Image(XmlWriter xmlWriter, ModuleModel module, NPCModel npc)
		{
			if (module.IncludeImages)
			{
				xmlWriter.WriteStartElement("image"); /* <root version="4.0"> <image> */
				Image_Category(xmlWriter, module, npc);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> </image> */
			}
		}

		private static void Image_Category(XmlWriter xmlWriter, ModuleModel module, NPCModel npc)
		{
			foreach (CategoryModel category in module.Categories)
			{
				xmlWriter.WriteStartElement("category"); /* <root version="4.0"> <image> <category> */
				xmlWriter.WriteAttributeString("name", category.Name); /* <root version="4.0"> <image> <category> */
				xmlWriter.WriteAttributeString("baseicon", "0");
				xmlWriter.WriteAttributeString("decalicon", "0");
				Image_Category_ImageName(xmlWriter, category, npc);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> </category> */
			}
		}

		private static void Image_Category_ImageName(XmlWriter xmlWriter, CategoryModel category, NPCModel npcModel)
		{
			foreach (NPCModel npc in category.NPCModels)
			{
				if (!string.IsNullOrEmpty(npcModel.NPCImage))
				{
					xmlWriter.WriteStartElement(Path.GetFileNameWithoutExtension(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
					/* <root version="4.0"> <image> <category> <image_name> */
					Image_Category_ImageName_Image(xmlWriter, npcModel);
					CommonMethods.WriteModuleLocked(xmlWriter);
					NPCExporter.WriteName(xmlWriter, npcModel);
					Image_Category_ImageName_Image_NonidName(xmlWriter, npcModel);
					Image_Category_ImageName_Image_Identified(xmlWriter, npcModel);
					xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> </image_name> */
				}
			}
		}

		private static void Image_Category_ImageName_Image_Identified(XmlWriter xmlWriter, NPCModel npcModel)
		{
			if (!string.IsNullOrEmpty(npcModel.NonID))
			{
				xmlWriter.WriteStartElement("isidentified"); /* <root version="4.0"> <image> <category> <image_name> <isidentified> */
				xmlWriter.WriteAttributeString("type", "number");
				xmlWriter.WriteString("0");
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <isidentified> </isidentified> */
			}
		}

		private static void Image_Category_ImageName_Image_NonidName(XmlWriter xmlWriter, NPCModel npcModel)
		{
			if (!string.IsNullOrEmpty(npcModel.NonID))
			{
				xmlWriter.WriteStartElement("nonid_name"); /* <root version="4.0"> <image> <category> <image_name> <nonid_name> */
				xmlWriter.WriteAttributeString("type", "string");
				xmlWriter.WriteString(npcModel.NonID);
				xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <nonid_name> </nonid_name> */
			}
		}

		private static void Image_Category_ImageName_Image(XmlWriter xmlWriter, NPCModel npcModel)
		{
			xmlWriter.WriteStartElement("image"); /* <root version="4.0"> <image> <category> <image_name> <image> */
			xmlWriter.WriteAttributeString("type", "image");
			Image_Category_ImageName_Image_Bitmap(xmlWriter, npcModel);
			xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <image> </image> */
		}

		private static void Image_Category_ImageName_Image_Bitmap(XmlWriter xmlWriter, NPCModel npcModel)
		{
			xmlWriter.WriteStartElement("bitmap"); /* <root version="4.0"> <image> <category> <image_name> <image> <bitmap> */
			xmlWriter.WriteAttributeString("type", "string");
			xmlWriter.WriteString("images" + "\\" + Path.GetFileName(npcModel.NPCImage).Replace(" ", "").Replace("-", ""));
			xmlWriter.WriteEndElement(); /* <root version="4.0"> <image> <category> <image_name> <image> <bitmap> </bitmap> */
		}
	}
}
