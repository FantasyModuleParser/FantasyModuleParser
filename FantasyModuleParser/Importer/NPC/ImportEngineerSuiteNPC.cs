using FantasyModuleParser.NPC;
using FantasyModuleParser.NPC.Controllers;
using FantasyModuleParser.NPC.Models.Action;
using FantasyModuleParser.NPC.Models.Action.Enums;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms.VisualStyles;

namespace FantasyModuleParser.Importer.NPC
{
    public class ImportEngineerSuiteNPC : IImportNPC
    {
        public ImportEngineerSuiteNPC()
        {

        }

        /// <summary>
        /// Parses & Imports data from .npc files generated by Engineer Suite - NPC Module by Maasq
        /// </summary>
        /// <param name="importTextContent">The file content of an *.npc file created by the NPC Engineer module in Engineer Suite</param>
        /// <returns></returns>
        public NPCModel ImportTextToNPCModel(string importTextContent)
        {
            NPCModel parsedNPCModel = new NPCModel();

            string line = "";
            StringReader stringReader = new StringReader(importTextContent);
            int lineNumber = 0;
            while((line = stringReader.ReadLine()) != null)
            {
                if(lineNumber == 1)
                {
                    // Line number one indicates the NPC name
                    parsedNPCModel.NPCName = line;
                }
                if(lineNumber == 2)
                {
                    // Line 2 indicates Size, Type, (tag), Alignment
                    ParseSizeAndAlignment(parsedNPCModel, line);
                }

                if (line.StartsWith("Armor Class", StringComparison.Ordinal))
                    ParseArmorClass(parsedNPCModel, line);
                if (line.StartsWith("Hit Points", StringComparison.Ordinal))
                    ParseHitPoints(parsedNPCModel, line);
                if (line.StartsWith("Speed", StringComparison.Ordinal))
                    ParseSpeedAttributes(parsedNPCModel, line);
                if (line.StartsWith("STR DEX CON INT WIS CHA", StringComparison.Ordinal))
                    ParseStatAttributes(parsedNPCModel, line);
                if (line.StartsWith("Saving Throws", StringComparison.Ordinal))
                    ParseSavingThrows(parsedNPCModel, line);
                if (line.StartsWith("Skills", StringComparison.Ordinal))
                    ParseSkillAttributes(parsedNPCModel, line);
                if (line.StartsWith("Damage Resistances", StringComparison.Ordinal))
                    ParseDamageResistances(parsedNPCModel, line);
                if (line.StartsWith("Damage Vulnerabilities", StringComparison.Ordinal))
                    ParseDamageVulnerabilities(parsedNPCModel, line);
                if (line.StartsWith("Damage Immunities", StringComparison.Ordinal))
                    ParseDamageImmunities(parsedNPCModel, line);
                lineNumber++;
            }

            return parsedNPCModel;
        }

        /// <summary>
        /// 'Tiny beast (devil), lawful neutral'
        /// </summary>
        public void ParseSizeAndAlignment(NPCModel npcModel, string sizeAndAlignment)
        {
            string[] npcCharacteristics = sizeAndAlignment.Split(' ');
            npcModel.Size = npcCharacteristics[0].ToLower();
            string tag = npcCharacteristics[1].ToLower();
            if (tag.EndsWith(","))
                npcModel.NPCType = tag.Substring(0, tag.Length - 1);
            else
                npcModel.NPCType = npcCharacteristics[1].ToLower();

            if (npcCharacteristics[2].Contains("("))
            {
                // includes removing the comma character at the end
                npcModel.Tag = npcCharacteristics[2].ToLower().Substring(0, npcCharacteristics[2].Length - 1);
            }

            if(npcModel.Tag != null && npcModel.Tag.Length > 0)
                npcModel.Alignment = npcCharacteristics[3] + " " + npcCharacteristics[4];
            else
                npcModel.Alignment = npcCharacteristics[2] + " " + npcCharacteristics[3];


        }

        /// <summary>
        /// 'Armor Class 16'
        /// </summary>
        public void ParseArmorClass(NPCModel npcModel, string armorClass)
        {
            if(armorClass.StartsWith("Armor Class ", StringComparison.Ordinal))
            {
                npcModel.AC = armorClass.Substring(12);
            }
        }

        /// <summary>
        /// 'Hit Points 90 (10d8 + 44)'
        /// </summary>
        public void ParseHitPoints(NPCModel npcModel, string hitPoints)
        {
            if(hitPoints.StartsWith("Hit Points"))
            {
                npcModel.HP = hitPoints.Substring(11);
            }
        }

        /// <summary>
        /// 'Speed 10 ft., burrow 20 ft., climb 30 ft., fly 40 ft. (hover), swim 50 ft.'
        /// </summary>S
        public void ParseSpeedAttributes(NPCModel npcModel, string speedAttributes)
        {
            if (speedAttributes == null || speedAttributes.Length == 0)
            {
                npcModel.Speed = 0;
                npcModel.Burrow = 0;
                npcModel.Climb = 0;
                npcModel.Fly = 0;
                npcModel.Hover = false;
                npcModel.Swim = 0;
                return;
            }
            foreach(string speedAttribute in speedAttributes.Split(','))
            {
                var trimmedSpeedAttribute = speedAttribute.Trim().ToLower(CultureInfo.CurrentCulture);
                if(trimmedSpeedAttribute.StartsWith("speed ", StringComparison.Ordinal))
                {
                    npcModel.Speed = int.Parse(trimmedSpeedAttribute.Split(' ')[1], CultureInfo.CurrentCulture);
                }
                if (trimmedSpeedAttribute.StartsWith("burrow ", StringComparison.Ordinal))
                {
                    npcModel.Burrow = int.Parse(trimmedSpeedAttribute.Split(' ')[1], CultureInfo.CurrentCulture);
                }
                if (trimmedSpeedAttribute.StartsWith("climb ", StringComparison.Ordinal))
                {
                    npcModel.Climb = int.Parse(trimmedSpeedAttribute.Split(' ')[1], CultureInfo.CurrentCulture);
                }
                if (trimmedSpeedAttribute.StartsWith("fly ", StringComparison.Ordinal))
                {
                    npcModel.Fly = int.Parse(trimmedSpeedAttribute.Split(' ')[1], CultureInfo.CurrentCulture);
                }
                if (trimmedSpeedAttribute.Contains("(hover)"))
                {
                    npcModel.Hover = true;
                }
                if (trimmedSpeedAttribute.StartsWith("swim ", StringComparison.Ordinal))
                {
                    npcModel.Swim = int.Parse(trimmedSpeedAttribute.Split(' ')[1], CultureInfo.CurrentCulture);
                }
            }
        }

        /// <summary>
        /// 'STR DEX CON INT WIS CHA 10 (+0) 11 (+0) 12 (+1) 13 (+1) 14 (+2) 15 (+2)'
        /// </summary>
        public void ParseStatAttributes(NPCModel npcModel, string statAttributes)
        {
            if(statAttributes.StartsWith("STR DEX CON INT WIS CHA")) { 
            string[] splitAttributes = statAttributes.Split(' ');
                npcModel.AttributeStr = int.Parse(splitAttributes[6], CultureInfo.CurrentCulture);
                npcModel.AttributeDex = int.Parse(splitAttributes[8], CultureInfo.CurrentCulture);
                npcModel.AttributeCon = int.Parse(splitAttributes[10], CultureInfo.CurrentCulture);
                npcModel.AttributeInt = int.Parse(splitAttributes[12], CultureInfo.CurrentCulture);
                npcModel.AttributeWis = int.Parse(splitAttributes[14], CultureInfo.CurrentCulture);
                npcModel.AttributeCha = int.Parse(splitAttributes[16], CultureInfo.CurrentCulture);
            }
        }

        /// <summary>
        /// 'Saving Throws Str +1, Dex +2, Con +3, Int +0, Wis +5, Cha +6'
        /// </summary>
        public void ParseSavingThrows(NPCModel npcModel, string savingThrows)
        {
            if(savingThrows.StartsWith("Saving Throws"))
            {
                string[] splitSavingThrows = savingThrows.Split(' ');
                bool isStr = false, isDex = false, isCon = false, isInt = false, isWis = false, isCha = false;
                bool attributeIdentified = false;
                foreach(string savingThrowWord in splitSavingThrows)
                {
                    if (savingThrowWord.Equals("Saving", StringComparison.Ordinal) || savingThrowWord.Equals("Throws", StringComparison.Ordinal))
                        continue;

                    if (attributeIdentified)
                    {
                        if (isStr)
                        {
                            npcModel.SavingThrowStr = parseAttributeStringToInt(savingThrowWord);
                            npcModel.SavingThrowStrBool = npcModel.SavingThrowStr == 0;
                        }
                        if (isDex)
                        {
                            npcModel.SavingThrowDex = parseAttributeStringToInt(savingThrowWord);
                            npcModel.SavingThrowDexBool = npcModel.SavingThrowDex == 0;
                        }
                        if (isCon)
                        {
                            npcModel.SavingThrowCon = parseAttributeStringToInt(savingThrowWord);
                            npcModel.SavingThrowConBool = npcModel.SavingThrowCon == 0;
                        }
                        if (isInt)
                        {
                            npcModel.SavingThrowInt= parseAttributeStringToInt(savingThrowWord);
                            npcModel.SavingThrowIntBool = npcModel.SavingThrowInt== 0;
                        }
                        if (isWis)
                        {
                            npcModel.SavingThrowWis= parseAttributeStringToInt(savingThrowWord);
                            npcModel.SavingThrowWisBool = npcModel.SavingThrowWis== 0;
                        }
                        if (isCha)
                        {
                            npcModel.SavingThrowCha= parseAttributeStringToInt(savingThrowWord);
                            npcModel.SavingThrowChaBool = npcModel.SavingThrowCha== 0;
                        }

                        attributeIdentified = false; // Reset for next attribute check
                    } 
                    else
                    {
                        isStr = savingThrowWord.Equals("Str", StringComparison.Ordinal);
                        isDex = savingThrowWord.Equals("Dex", StringComparison.Ordinal);
                        isCon = savingThrowWord.Equals("Con", StringComparison.Ordinal);
                        isInt = savingThrowWord.Equals("Int", StringComparison.Ordinal);
                        isWis = savingThrowWord.Equals("Wis", StringComparison.Ordinal);
                        isCha = savingThrowWord.Equals("Cha", StringComparison.Ordinal);
                        attributeIdentified = true;
                    }
                }
                
            }
        }
        private int parseAttributeStringToInt(string savingThrowValue)
        {
            savingThrowValue = savingThrowValue.Replace('+', ' ');
            savingThrowValue = savingThrowValue.Replace(',', ' ');
            string savingThrowValueSubstring = savingThrowValue.Trim();
            return int.Parse(savingThrowValueSubstring, CultureInfo.CurrentCulture);
        }

        /// <summary>
        /// 'Skills Acrobatics +1, Animal Handling +2, Arcana +3, Athletics +4, Deception +5, History +6, Insight +7, Intimidation +8, Investigation +9,
        ///  Medicine +10, Nature +11, Perception +12, Performance +13, Persuasion +14, Religion +15, Sleight of Hand +16, Stealth +17, Survival +18'
        /// </summary>
        public void ParseSkillAttributes(NPCModel npcModel, string skillAttributes)
        {
            int columnIndex = 0;
            string[] skillAttributeArray = skillAttributes.Split(' ');
            foreach (string skillAttributeValue in skillAttributeArray)
            {
                switch (skillAttributeValue)
                {
                    case "Acrobatics":
                        npcModel.Acrobatics = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Animal":
                        npcModel.AnimalHandling = parseAttributeStringToInt(skillAttributeArray[columnIndex + 2]);
                        break;
                    case "Arcana":
                        npcModel.Arcana = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Athletics":
                        npcModel.Athletics = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Deception":
                        npcModel.Deception = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "History":
                        npcModel.History = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Insight":
                        npcModel.Insight = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Intimidation":
                        npcModel.Intimidation = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Investigation":
                        npcModel.Investigation = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Medicine":
                        npcModel.Medicine = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Nature":
                        npcModel.Nature = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Perception":
                        npcModel.Perception = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Performance":
                        npcModel.Performance = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Persuasion":
                        npcModel.Persuasion = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Religion":
                        npcModel.Religion = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Sleight":
                        npcModel.SleightOfHand = parseAttributeStringToInt(skillAttributeArray[columnIndex + 3]);
                        break;
                    case "Stealth":
                        npcModel.Stealth = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    case "Survival":
                        npcModel.Survival = parseAttributeStringToInt(skillAttributeArray[columnIndex + 1]);
                        break;
                    default:
                        break;
                }
                columnIndex++;
            }
        }

        /// <summary>
        /// 'Damage Vulnerabilities acid, fire, lightning, poison, radiant; bludgeoning and slashing'
        /// </summary>
        public void ParseDamageVulnerabilities(NPCModel npcModel, string damageVulnerabilites)
        {
            if(damageVulnerabilites.StartsWith("Damage Vulnerabilities", StringComparison.Ordinal))
            {
                npcModel.DamageVulnerabilityModelList = parseDamageTypeStringToList(damageVulnerabilites);
            } else
            {
                // Populate with all options deselected
                npcModel.DamageVulnerabilityModelList = parseDamageTypeStringToList("");
            }
        }

        private List<SelectableActionModel> parseDamageTypeStringToList(string damageTypes)
        {
            NPCController npcController = new NPCController();
            List<SelectableActionModel> selectableActionModels = npcController.GetSelectableActionModelList(typeof(DamageType));
            if(damageTypes.Length == 0)
                return selectableActionModels;

            foreach(string damageTypeValue in damageTypes.Split(' '))
            {
                string damageTypeValueTrimmed = damageTypeValue.Replace(',', ' ').Replace(';', ' ').Trim();
                SelectableActionModel damageTypeModel = selectableActionModels.FirstOrDefault(item => item.ActionDescription.Equals(damageTypeValueTrimmed));
                if (damageTypeModel != null)
                    damageTypeModel.Selected = true;
            }


            return selectableActionModels;
        }

        /// <summary>
        /// 'Damage Resistances cold, force, necrotic, psychic, thunder from nonmagical weapons'
        /// </summary>
        public void ParseDamageResistances(NPCModel npcModel, string damageResistances)
        {
            if (damageResistances.StartsWith("Damage Resistances", StringComparison.Ordinal))
            {
                npcModel.DamageResistanceModelList = parseDamageTypeStringToList(damageResistances);
            }
            else
            {
                // Populate with all options deselected
                npcModel.DamageResistanceModelList = parseDamageTypeStringToList("");
            }
        }

        /// <summary>
        /// 'Damage Immunities acid, force, poison, thunder; slashing from nonmagical weapons that aren't silvered'
        /// </summary>
        public void ParseDamageImmunities(NPCModel npcModel, string damageImmunities)
        {
            if (damageImmunities.StartsWith("Damage Immunities", StringComparison.Ordinal))
            {
                npcModel.DamageImmunityModelList = parseDamageTypeStringToList(damageImmunities);
            }
            else
            {
                // Populate with all options deselected
                npcModel.DamageImmunityModelList = parseDamageTypeStringToList("");
            }
        }

        /// <summary>
        /// 'Condition Immunities blinded, frightened, invisible, paralyzed, prone, restrained'
        /// </summary>
        public void ParseConditionImmunities(NPCModel npcModel, string conditionImmunities)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Senses blindsight 60 ft. (blind beyond this radius), darkvision 70 ft., tremorsense 80 ft., truesight 90 ft., passive Perception 22'
        /// </summary>
        public void ParseVisionAttributes(NPCModel npcModel, string visionAttributes)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Languages Aarakocra, Bullywug, Celestial, Common, Draconic, Elvish, Gnomish, Grell, Halfling, Ice toad, Infernal, Modron, Slaad, Sylvan, Thieves' cant, Thri-kreen, Umber hulk, telepathy 90'
        /// </summary>
        public void ParseLanguages(NPCModel npcModel, string languages)
        {
            //throw new NotImplementedException();
        }

        /// <summary>
        /// 'Challenge 8 (3,900 XP)'
        /// </summary>
        public void ParseChallengeRatingAndXP(NPCModel npcModel, string challengeRatingAndXP)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Trait Number 1. Some trait goes here for flavor Anger. This NPC gets angry very, very easily Unit Test. Unit Test the third'
        /// </summary>
        public void ParseTraits(NPCModel npcModel, string traits)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Spellcasting. V1_npc_all is an 18th-level spellcaster. His spellcasting ability is Constitution (spell save DC 8, +12 to hit with spell attacks). V1_npc_all has the following Sorcerer spells prepared:\rCantrips (At will): Cantrips1\r1st level (9 slots): Spell 1st\r2nd level (8 slots): Spell 2nd\r3rd level (7 slots): Spell 3rd\r4th level (6 slots): Spell 4th\r5th level (5 slots): Spell 5th\r6th level (4 slots): Spell 6th\r7th level (3 slots): Spell 7th\r8th level (2 slots): Spell 8th\r9th level (1 slot): Spell 9th\r*Spell 2nd'
        /// </summary>
        public void ParseSpellCastingAttributes(NPCModel npcModel, string spellCastingAttributes)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Multiattack. .This creature makes 3 attacks.'
        /// </summary>
        public void ParseStandardAction(NPCModel npcModel, string standardAction)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Parry. You know what it does.. NINJA DODGE.'
        /// </summary>
        public void ParseReaction(NPCModel npcModel, string reaction)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Options. This creature has 5 legendary actions.'
        /// </summary>
        public void ParseLegendaryAction(NPCModel npcModel, string legendaryAction)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 'Options. This creature has 5 legendary actions.'
        /// </summary>
        public void ParseLairAction(NPCModel npcModel, string lairAction)
        {
            throw new NotImplementedException();
        }
    }
}
