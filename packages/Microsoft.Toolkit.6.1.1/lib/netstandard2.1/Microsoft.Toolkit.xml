<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Microsoft.Toolkit</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Toolkit.Collections.IReadOnlyObservableGroup">
            <summary>
            An interface for a grouped collection of items.
            It allows us to use x:Bind with <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> and <see cref="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2" /> by providing
            a non-generic type that we can declare using x:DataType.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Collections.IReadOnlyObservableGroup.Key">
            <summary>
            Gets the key for the current collection, as an <see cref="T:System.Object" />.
            It is immutable.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Collections.IReadOnlyObservableGroup.Count">
            <summary>
            Gets the number of items currently in the grouped collection.
            </summary>
        </member>
        <member name="T:Microsoft.Toolkit.Collections.ObservableGroup`2">
            <summary>
            An observable group.
            It associates a <see cref="P:Microsoft.Toolkit.Collections.ObservableGroup`2.Key" /> to an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroup`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> class.
            </summary>
            <param name="key">The key for the group.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroup`2.#ctor(System.Linq.IGrouping{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> class.
            </summary>
            <param name="grouping">The grouping to fill the group.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroup`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> class.
            </summary>
            <param name="key">The key for the group.</param>
            <param name="collection">The initial collection of data to add to the group.</param>
        </member>
        <member name="P:Microsoft.Toolkit.Collections.ObservableGroup`2.Key">
            <summary>
            Gets the key of the group.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Collections.ObservableGroup`2.Microsoft#Toolkit#Collections#IReadOnlyObservableGroup#Key" />
        <member name="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2">
            <summary>
            An observable list of observable groups.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2.#ctor(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> class.
            </summary>
            <param name="collection">The initial data to add in the grouped collection.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2.TryGetList(System.Collections.Generic.List{Microsoft.Toolkit.Collections.ObservableGroup{`0,`1}}@)">
            <summary>
            Tries to get the underlying <see cref="T:System.Collections.Generic.List`1" /> instance, if present.
            </summary>
            <param name="list">The resulting <see cref="T:System.Collections.Generic.List`1" />, if one was in use.</param>
            <returns>Whether or not a <see cref="T:System.Collections.Generic.List`1" /> instance has been found.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions">
            <summary>
            The extensions methods to simplify the usage of <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.First``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)">
            <summary>
            Return the first group with <paramref name="key" /> key.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group to query.</param>
            <returns>The first group matching <paramref name="key" />.</returns>
            <exception cref="T:System.InvalidOperationException">The target group does not exist.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.FirstOrDefault``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)">
            <summary>
            Return the first group with <paramref name="key" /> key or null if not found.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group to query.</param>
            <returns>The first group matching <paramref name="key" /> or null.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.FirstOrDefaultWithLinq``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)">
            <summary>
            Slow path for <see cref="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.First``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAt``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32)">
            <summary>
            Return the element at position <paramref name="index" /> from the first group with <paramref name="key" /> key.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group to query.</param>
            <param name="index">The index of the item from the targeted group.</param>
            <returns>The element.</returns>
            <exception cref="T:System.InvalidOperationException">The target group does not exist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than zero or <paramref name="index" /> is greater than the group elements' count.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ElementAtOrDefault``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32)">
            <summary>
            Return the element at position <paramref name="index" /> from the first group with <paramref name="key" /> key.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group to query.</param>
            <param name="index">The index of the item from the targeted group.</param>
            <returns>The element or default(TValue) if it does not exist.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1)">
            <summary>
            Adds a key-value <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> item into a target <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where <paramref name="value" /> will be added.</param>
            <param name="value">The value to add.</param>
            <returns>The added <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" />.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1[])">
            <summary>
            Adds a key-collection <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> item into a target <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where <paramref name="collection" /> will be added.</param>
            <param name="collection">The collection to add.</param>
            <returns>The added <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" />.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds a key-collection <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> item into a target <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" />.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where <paramref name="collection" /> will be added.</param>
            <param name="collection">The collection to add.</param>
            <returns>The added <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" />.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.AddItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1)">
            <summary>
            Add <paramref name="item" /> into the first group with <paramref name="key" /> key.
            If the group does not exist, it will be added.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where the <paramref name="item" /> should be added.</param>
            <param name="item">The item to add.</param>
            <returns>The instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> which will receive the value. It will either be an existing group or a new group.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.InsertItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,``1)">
            <summary>
            Insert <paramref name="item" /> into the first group with <paramref name="key" /> key at <paramref name="index" />.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where to insert <paramref name="item" />.</param>
            <param name="index">The index where to insert <paramref name="item" />.</param>
            <param name="item">The item to add.</param>
            <returns>The instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> which will receive the value.</returns>
            <exception cref="T:System.InvalidOperationException">The target group does not exist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than zero or <paramref name="index" /> is greater than the group elements' count.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.SetItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,``1)">
            <summary>
            Replace the element at <paramref name="index" /> with <paramref name="item" /> in the first group with <paramref name="key" /> key.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where to replace the item.</param>
            <param name="index">The index where to insert <paramref name="item" />.</param>
            <param name="item">The item to add.</param>
            <returns>The instance of the <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> which will receive the value.</returns>
            <exception cref="T:System.InvalidOperationException">The target group does not exist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than zero or <paramref name="index" /> is greater than the group elements' count.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)">
            <summary>
            Remove the first occurrence of the group with <paramref name="key" /> from the <paramref name="source" /> grouped collection.
            It will not do anything if the group does not exist.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group to remove.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveGroupWithLinq``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)">
            <summary>
            Slow path for <see cref="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveGroup``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0)" />.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Remove the first <paramref name="item" /> from the first group with <paramref name="key" /> from the <paramref name="source" /> grouped collection.
            It will not do anything if the group or the item does not exist.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where the <paramref name="item" /> should be removed.</param>
            <param name="item">The item to remove.</param>
            <param name="removeGroupIfEmpty">If true (default value), the group will be removed once it becomes empty.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItemWithLinq``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Slow path for <see cref="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItem``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,``1,System.Boolean)" />.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItemAt``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,System.Boolean)">
            <summary>
            Remove the item at <paramref name="index" /> from the first group with <paramref name="key" /> from the <paramref name="source" /> grouped collection.
            It will not do anything if the group or the item does not exist.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
            <param name="source">The source <see cref="T:Microsoft.Toolkit.Collections.ObservableGroupedCollection`2" /> instance.</param>
            <param name="key">The key of the group where the item at <paramref name="index" /> should be removed.</param>
            <param name="index">The index of the item to remove in the group.</param>
            <param name="removeGroupIfEmpty">If true (default value), the group will be removed once it becomes empty.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than zero or <paramref name="index" /> is greater than the group elements' count.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItemAtWithLinq``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,System.Boolean)">
            <summary>
            Slow path for <see cref="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.RemoveItemAt``2(Microsoft.Toolkit.Collections.ObservableGroupedCollection{``0,``1},``0,System.Int32,System.Boolean)" />.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ObservableGroupedCollectionExtensions.ThrowArgumentExceptionForKeyNotFound">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException" /> when a key is not found.
            </summary>
        </member>
        <member name="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2">
            <summary>
            A read-only observable group. It associates a <see cref="P:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2.Key" /> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2.#ctor(`0,System.Collections.ObjectModel.ObservableCollection{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2" /> class.
            </summary>
            <param name="key">The key of the group.</param>
            <param name="collection">The collection of items to add in the group.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2.#ctor(Microsoft.Toolkit.Collections.ObservableGroup{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2" /> class.
            </summary>
            <param name="group">The <see cref="T:Microsoft.Toolkit.Collections.ObservableGroup`2" /> to wrap.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2" /> class.
            </summary>
            <param name="key">The key of the group.</param>
            <param name="collection">The collection of items to add in the group.</param>
        </member>
        <member name="P:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2.Key">
            <summary>
            Gets the key for the current collection, as an <see cref="T:System.Object" />.
            It is immutable.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Collections.ReadOnlyObservableGroup`2.Microsoft#Toolkit#Collections#IReadOnlyObservableGroup#Key" />
        <member name="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2">
            <summary>
            A read-only list of groups.
            </summary>
            <typeparam name="TKey">The type of the group key.</typeparam>
            <typeparam name="TValue"> The type of the items in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2.#ctor(Microsoft.Toolkit.Collections.ObservableGroupedCollection{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2" /> class.
            </summary>
            <param name="collection">The source collection to wrap.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Toolkit.Collections.ReadOnlyObservableGroup{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2" /> class.
            </summary>
            <param name="collection">The initial data to add in the grouped collection.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2.#ctor(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Collections.ReadOnlyObservableGroupedCollection`2" /> class.
            </summary>
            <param name="collection">The initial data to add in the grouped collection.</param>
        </member>
        <member name="T:Microsoft.Toolkit.Collections.IIncrementalSource`1">
            <summary>
            This interface represents a data source whose items can be loaded incrementally.
            </summary>
            <typeparam name="TSource">Type of collection element.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Collections.IIncrementalSource`1.GetPagedItemsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            This method is invoked everytime the view need to show more items. Retrieves items based on <paramref name="pageIndex" /> and <paramref name="pageSize" /> arguments.
            </summary>
            <param name="pageIndex">
            The zero-based index of the page that corresponds to the items to retrieve.
            </param>
            <param name="pageSize">
            The number of <typeparamref name="TSource" /> items to retrieve for the specified <paramref name="pageIndex" />.
            </param>
            <param name="cancellationToken">
            Used to propagate notification that operation should be canceled.
            </param>
            <returns>
            Returns a collection of <typeparamref name="TSource" />.
            </returns>
        </member>
        <member name="T:Microsoft.Toolkit.Converters">
            <summary>
            Set of helpers to convert between data types and notations.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Converters.ToFileSizeString(System.Int64)">
            <summary>
            Translate numeric file size in bytes to a human-readable shorter string format.
            </summary>
            <param name="size">File size in bytes.</param>
            <returns>Returns file size short string.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Diagnostics.Guard">
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Span{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Span{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Span`1" /> instance must have the same size of a destination <see cref="T:System.Span`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Span`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Span`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Span`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Span`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span" />.</param>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="span" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Span`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span" />.</param>
            <param name="span">The input <see cref="T:System.Span`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="span" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlySpan`1" /> instance must have the same size of a destination <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlySpan`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlySpan`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span" />.</param>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="span" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.ReadOnlySpan`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span" />.</param>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="span" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Memory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Memory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Memory`1" /> instance must have the same size of a destination <see cref="T:System.Memory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Memory`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Memory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Memory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory" />.</param>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="memory" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Memory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory" />.</param>
            <param name="memory">The input <see cref="T:System.Memory`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="memory" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlyMemory`1" /> instance must have the same size of a destination <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlyMemory`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlyMemory`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory" />.</param>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="memory" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.ReadOnlyMemory`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory" />.</param>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="memory" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(``0[],System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T" /> array instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Asserts that the source <see typeparamref="T" /> array instance must have the same size of a destination <see typeparamref="T" /> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="source">The source <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="destination">The destination <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Asserts that the source <see typeparamref="T" /> array instance must have a size of less than or equal to that of a destination <see typeparamref="T" /> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="source">The source <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="destination">The destination <see typeparamref="T" /> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Asserts that the input index is valid for a given <see typeparamref="T" /> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="array" />.</param>
            <param name="array">The input <see typeparamref="T" /> array instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="array" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see typeparamref="T" /> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T" /> array instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="array" />.</param>
            <param name="array">The input <see typeparamref="T" /> array instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="array" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.List`1" /> instance must have the same size of a destination <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.List`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.List`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="list" />.</param>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="list" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.List`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="list" />.</param>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="list" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have the same size of a destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.ICollection`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.ICollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection" />.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.ICollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection" />.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have the same size of a destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection" />.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection" />.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Byte" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Byte" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Byte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="target">The target <see cref="T:System.SByte" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="target">The target <see cref="T:System.SByte" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.SByte" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int16" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int16" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt16" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt16" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt16" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Char" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Char" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Char" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt32" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt32" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt32" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Single" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt64" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt64" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt64" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Double" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Decimal" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Decimal" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal" /> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Decimal" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsDefault``1(``0,System.String)">
            <summary>
            Asserts that the input value is <see langword="default" />.
            </summary>
            <typeparam name="T">The type of <see langword="struct" /> value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not <see langword="default" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotDefault``1(``0,System.String)">
            <summary>
            Asserts that the input value is not <see langword="default" />.
            </summary>
            <typeparam name="T">The type of <see langword="struct" /> value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="default" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="target">The target <typeparamref name="T" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is != <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="target">The target <typeparamref name="T" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is == <paramref name="target" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBitwiseEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be a bitwise match with a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="target">The target <typeparamref name="T" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not a bitwise match for <paramref name="target" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="maximum">The inclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="maximum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The exclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The exclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt;= <paramref name="minimum" /> or &gt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The exclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt; <paramref name="minimum" /> or &lt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in (<paramref name="minimum" />, <paramref name="maximum" />)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &lt; <paramref name="minimum" /> or &gt; <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T" /> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <typeparamref name="T" /> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is &gt;= <paramref name="minimum" /> or &lt;= <paramref name="maximum" />.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value" /> not in [<paramref name="minimum" />, <paramref name="maximum" />]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Single" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &gt; <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double" /> value to test.</param>
            <param name="target">The target <see cref="T:System.Double" /> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value" /> and <paramref name="target" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value" /> - <paramref name="target" />) &lt;= <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(``0,System.String)">
            <summary>
            Asserts that the input value is <see langword="null" />.
            </summary>
            <typeparam name="T">The type of reference value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(System.Nullable{``0},System.String)">
            <summary>
            Asserts that the input value is <see langword="null" />.
            </summary>
            <typeparam name="T">The type of nullable value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not <see langword="null" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(``0,System.String)">
            <summary>
            Asserts that the input value is not <see langword="null" />.
            </summary>
            <typeparam name="T">The type of reference value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Asserts that the input value is not <see langword="null" />.
            </summary>
            <typeparam name="T">The type of nullable value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <see langword="null" />.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value is of a specific type.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not of type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value is not of a specific type.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is of type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value is of a specific type.
            </summary>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the type of <paramref name="value" /> is not the same as <paramref name="type" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value is not of a specific type.
            </summary>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the type of <paramref name="value" /> is the same as <paramref name="type" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value can be assigned to a specified type.
            </summary>
            <typeparam name="T">The type to check the input value against.</typeparam>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can't be assigned to type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value can't be assigned to a specified type.
            </summary>
            <typeparam name="T">The type to check the input value against.</typeparam>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can be assigned to type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value can be assigned to a specified type.
            </summary>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can't be assigned to <paramref name="type" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value can't be assigned to a specified type.
            </summary>
            <param name="value">The input <see cref="T:System.Object" /> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> can be assigned to <paramref name="type" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be the same instance as the target value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="target">The target <typeparamref name="T" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is not the same instance as <paramref name="target" />.</exception>
            <remarks>The method is generic to prevent using it with value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be the same instance as the target value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T" /> value to test.</param>
            <param name="target">The target <typeparamref name="T" /> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is the same instance as <paramref name="target" />.</exception>
            <remarks>The method is generic to prevent using it with value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that the input value must be <see langword="true" />.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="false" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that the input value must be <see langword="true" />.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <param name="message">A message to display if <paramref name="value" /> is <see langword="false" />.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="false" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that the input value must be <see langword="false" />.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="true" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that the input value must be <see langword="false" />.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean" /> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <param name="message">A message to display if <paramref name="value" /> is <see langword="true" />.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value" /> is <see langword="true" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.CanRead(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must support reading.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> doesn't support reading.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.CanWrite(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must support writing.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> doesn't support writing.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.CanSeek(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must support seeking.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> doesn't support seeking.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsAtStartPosition(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream" /> instance must be at the starting position.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> is not at the starting position.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be <see langword="null" /> or empty.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or empty.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is <see langword="null" /> or empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be <see langword="null" /> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is <see langword="null" /> or whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be empty.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be empty.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must be whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is neither <see langword="null" /> nor whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must not be <see langword="null" /> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text" /> is <see langword="null" /> or whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is != <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size not equal to a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is == <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size over a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &lt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of at least specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &lt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of less than a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &gt;= <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String" /> instance must have a size of less than or equal to a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text" /> is &gt; <paramref name="size" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.String,System.String)">
            <summary>
            Asserts that the source <see cref="T:System.String" /> instance must have the same size of a destination <see cref="T:System.String" /> instance.
            </summary>
            <param name="source">The source <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is != the one of <paramref name="destination" />.</exception>
            <remarks>The <see cref="T:System.String" /> type is immutable, but the name of this API is kept for consistency with the other overloads.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.String,System.String)">
            <summary>
            Asserts that the source <see cref="T:System.String" /> instance must have a size of less than or equal to that of a destination <see cref="T:System.String" /> instance.
            </summary>
            <param name="source">The source <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.String" /> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source" /> is &gt; the one of <paramref name="destination" />.</exception>
            <remarks>The <see cref="T:System.String" /> type is immutable, but the name of this API is kept for consistency with the other overloads.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.String" /> instance.
            </summary>
            <param name="index">The input index to be used to access <paramref name="text" />.</param>
            <param name="text">The input <see cref="T:System.String" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is not valid to access <paramref name="text" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.String" /> instance.
            </summary>
            <param name="index">The input index to be used to access <paramref name="text" />.</param>
            <param name="text">The input <see cref="T:System.String" /> instance to use to validate <paramref name="index" />.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is valid to access <paramref name="text" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is in a completed state.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is not in a completed state.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is not in a completed state.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is in a completed state.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has been completed successfully.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> has not been completed successfully.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has not been completed successfully.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> has been completed successfully.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is faulted.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is not faulted.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is not faulted.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is faulted.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is canceled.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is not canceled.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance is not canceled.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> is canceled.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has a specific status.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="status">The task status that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> doesn't match <paramref name="status" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusNotEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task" /> instance has not a specific status.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task" /> instance to test.</param>
            <param name="status">The task status that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> matches <paramref name="status" />.</exception>
        </member>
        <member name="T:Microsoft.Toolkit.Diagnostics.ThrowHelper">
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
            <summary>
            Helper methods to throw exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.ReadOnlySpan{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)" /> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotEmptyWithSpan``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Span{``0},System.String)" /> fails.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1" /> instance.</typeparam>
            <remarks>This method is needed because <see cref="T:System.Span`1" /> can't be used as a generic type parameter.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotEmptyWithReadOnlySpan``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlySpan{``0},System.String)" /> fails.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1" /> instance.</typeparam>
            <remarks>This method is needed because <see cref="T:System.ReadOnlySpan`1" /> can't be used as a generic type parameter.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotEmpty``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(``0[],System.String)" /> (or an overload) fails.
            </summary>
            <typeparam name="T">The item of items in the input collection.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsDefault``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsDefault``1(``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of <see langword="struct" /> value type being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotDefault``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotDefault``1(``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of <see langword="struct" /> value type being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsLessThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange``1(``0,``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange``1(``0,``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsBetween``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween``1(``0,``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotBetween``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween``1(``0,``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo``1(``0,``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo``1(``0,``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int32,System.Int32,System.UInt32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int32,System.Int32,System.UInt32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int64,System.Int64,System.UInt64,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int64,System.Int64,System.UInt64,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Single,System.Single,System.Single,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Single,System.Single,System.Single,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Double,System.Double,System.Double,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Double,System.Double,System.Double,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(``0,System.String)" /> (where <typeparamref name="T" /> is <see langword="class" />) fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(``0,System.String)" /> (where <typeparamref name="T" /> is <see langword="struct" />) fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullExceptionForIsNotNull``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsOfType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType``1(System.Object,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotOfType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType``1(System.Object,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsOfType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType(System.Object,System.Type,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotOfType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType(System.Object,System.Type,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsAssignableToType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType``1(System.Object,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type being checked against.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotAssignableToType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType``1(System.Object,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type being checked against.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType(System.Object,System.Type,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType(System.Object,System.Type,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForsBitwiseEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsBitwiseEqualTo``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of input values being compared.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsReferenceEqualTo``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceEqualTo``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of input value being compared.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsReferenceNotEqualTo``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceNotEqualTo``1(``0,``0,System.String)" /> fails.
            </summary>
            <typeparam name="T">The type of input value being compared.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsTrue(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsTrue(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsFalse(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsFalse(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForCanRead(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.CanRead(System.IO.Stream,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForCanWrite(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.CanWrite(System.IO.Stream,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForCanSeek(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.CanSeek(System.IO.Stream,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsAtStartPosition(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAtStartPosition(System.IO.Stream,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrEmpty(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrEmpty(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhitespace(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhitespace(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsWhitespace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsWhitespace(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotWhitespace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotWhitespace(System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.Int32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo(System.String,System.Int32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan(System.String,System.Int32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo(System.String,System.Int32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan(System.String,System.Int32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.Int32,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor(System.Int32,System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor(System.Int32,System.String,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompleted(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompleted(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompletedSuccessfully(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompletedSuccessfully(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsFaulted(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotFaulted(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCanceled(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForIsNotCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCanceled(System.Threading.Tasks.Task,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasStatusEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentExceptionForHasStatusNotEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusNotEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)" /> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ToAssertString(System.Object)">
            <summary>
            Returns a formatted representation of the input value.
            </summary>
            <param name="obj">The input <see cref="T:System.Object" /> to format.</param>
            <returns>A formatted representation of <paramref name="obj" /> to display in error messages.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException" />.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with <paramref name="message" /> and <paramref name="name" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException" />.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with <paramref name="name" /> and <paramref name="message" />.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with <paramref name="name" /> and <paramref name="message" />.</exception>
        </member>
        <member name="T:Microsoft.Toolkit.Extensions.ArrayExtensions">
            <summary>
            Helpers for working with arrays.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ArrayExtensions.Fill``1(``0[0:,0:],``0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills elements of a rectangular array at the given position and size to a specific value.
            Ranges given will fill in as many elements as possible, ignoring positions outside the bounds of the array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="array">The source array.</param>
            <param name="value">Value to fill with.</param>
            <param name="row">Row to start on (inclusive, zero-index).</param>
            <param name="col">Column to start on (inclusive, zero-index).</param>
            <param name="width">Positive width of area to fill.</param>
            <param name="height">Positive height of area to fill.</param>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Yields a row from a rectangular array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="rectarray">The source array.</param>
            <param name="row">Row record to retrieve, 0-based index.</param>
            <returns>Yielded row.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Yields a column from a rectangular array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="rectarray">The source array.</param>
            <param name="column">Column record to retrieve, 0-based index.</param>
            <returns>Yielded column.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ArrayExtensions.GetColumn``1(``0[][],System.Int32)">
            <summary>
            Yields a column from a jagged array.
            An exception will be thrown if the column is out of bounds, and return default in places where there are no elements from inner arrays.
            Note: There is no equivalent GetRow method, as you can use array[row] to retrieve.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="rectarray">The source array.</param>
            <param name="column">Column record to retrieve, 0-based index.</param>
            <returns>Yielded enumerable of column elements for given column, and default values for smaller inner arrays.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[])">
            <summary>
            Returns a simple string representation of an array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="array">The source array.</param>
            <returns>String representation of the array.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[][])">
            <summary>
            Returns a simple string representation of a jagged array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="mdarray">The source array.</param>
            <returns>String representation of the array.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ArrayExtensions.ToArrayString``1(``0[0:,0:])">
            <summary>
            Returns a simple string representation of a rectangular array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="rectarray">The source array.</param>
            <returns>String representation of the array.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Extensions.StringExtensions">
            <summary>
            Helpers for working with strings and string representations.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.StringExtensions.PhoneNumberRegex">
            <summary>
            Regular expression for matching a phone number.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.StringExtensions.CharactersRegex">
            <summary>
            Regular expression for matching a string that contains only letters.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.StringExtensions.EmailRegex">
            <summary>
            Regular expression for matching an email address.
            </summary>
            <remarks>General Email Regex (RFC 5322 Official Standard) from emailregex.com.</remarks>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.StringExtensions.RemoveHtmlTagsRegex">
            <summary>
            Regular expression of HTML tags to remove.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.StringExtensions.RemoveHtmlCommentsRegex">
            <summary>
            Regular expression for removing comments from HTML.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.StringExtensions.RemoveHtmlScriptsRegex">
            <summary>
            Regular expression for removing scripts from HTML.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.StringExtensions.RemoveHtmlStylesRegex">
            <summary>
            Regular expression for removing styles from HTML.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
            Determines whether a string is a valid email address.
            </summary>
            <param name="str">The string to test.</param>
            <returns>
                <c>true</c> for a valid email address; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.IsDecimal(System.String)">
            <summary>
            Determines whether a string is a valid decimal number.
            </summary>
            <param name="str">The string to test.</param>
            <returns>
                <c>true</c> for a valid decimal number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            Determines whether a string is a valid integer.
            </summary>
            <param name="str">The string to test.</param>
            <returns>
                <c>true</c> for a valid integer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.IsPhoneNumber(System.String)">
            <summary>
            Determines whether a string is a valid phone number.
            </summary>
            <param name="str">The string to test.</param>
            <returns>
                <c>true</c> for a valid phone number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.IsCharacterString(System.String)">
            <summary>
            Determines whether a string contains only letters.
            </summary>
            <param name="str">The string to test.</param>
            <returns>
                <c>true</c> if the string contains only letters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.ToSafeString(System.Object)">
            <summary>
            Returns a string representation of an object.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>String representation of the object.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.DecodeHtml(System.String)">
            <summary>
            Returns a string with HTML comments, scripts, styles, and tags removed.
            </summary>
            <param name="htmlText">HTML string.</param>
            <returns>Decoded HTML string.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.FixHtml(System.String)">
            <summary>
            Returns a string with HTML comments, scripts, and styles removed.
            </summary>
            <param name="html">HTML string to fix.</param>
            <returns>Fixed HTML string.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates a string to the specified length.
            </summary>
            <param name="value">The string to be truncated.</param>
            <param name="length">The maximum length.</param>
            <returns>Truncated string.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.AsFormat(System.String,System.Object[])">
            <summary>
            Provide better linking for resourced strings.
            </summary>
            <param name="format">The format of the string being linked.</param>
            <param name="args">The object which will receive the linked String.</param>
            <returns>Truncated string.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            Truncates a string to the specified length.
            </summary>
            <param name="value">The string to be truncated.</param>
            <param name="length">The maximum length.</param>
            <param name="ellipsis">
                <c>true</c> to add ellipsis to the truncated text; otherwise, <c>false</c>.</param>
            <returns>Truncated string.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Extensions.TypeExtensions">
            <summary>
            Helpers for working with types.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.TypeExtensions.BuiltInTypesMap">
            <summary>
            The mapping of built-in types to their simple representation.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Extensions.TypeExtensions.DisplayNames">
            <summary>
            A thread-safe mapping of precomputed string representation of types.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.TypeExtensions.ToTypeString(System.Type)">
            <summary>
            Returns a simple string representation of a type.
            </summary>
            <param name="type">The input type.</param>
            <returns>The string representation of <paramref name="type" />.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Extensions.ValueTypeExtensions">
            <summary>
            Helpers for working with value types.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Extensions.ValueTypeExtensions.HexCharactersTable">
            <summary>
            Gets the table of hex characters (doesn't allocate, maps to .text section, see <see href="https://github.com/dotnet/roslyn/pull/24621" />)
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Extensions.ValueTypeExtensions.ToHexString``1(``0)">
            <summary>
            Returns a hexadecimal <see cref="T:System.String" /> representation of a given <typeparamref name="T" /> value, left-padded and ordered as big-endian.
            </summary>
            <typeparam name="T">The input type to format to <see cref="T:System.String" />.</typeparam>
            <param name="value">The input value to format to <see cref="T:System.String" />.</param>
            <returns>
            The hexadecimal representation of <paramref name="value" /> (with the '0x' prefix), left-padded to byte boundaries and ordered as big-endian.
            </returns>
            <remarks>
            As a byte (8 bits) is represented by two hexadecimal digits (each representing a group of 4 bytes), each <see cref="T:System.String" />
            representation will always contain an even number of digits. For instance:
            <code>
            Console.WriteLine(1.ToHexString()); // "0x01"
            Console.WriteLine(((byte)255).ToHexString()); // "0xFF"
            Console.WriteLine((-1).ToHexString()); // "0xFFFFFFFF"
            </code></remarks>
        </member>
        <member name="T:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1">
            <summary>
            Helper class to wrap around a Task to provide more information usable for UI databinding scenarios. As discussed in MSDN Magazine: https://msdn.microsoft.com/magazine/dn605875.
            </summary>
            <typeparam name="TResult">Type of result returned by task.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1" /> class.
            </summary>
            <param name="task">Task to wait on.</param>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.Task">
            <summary>
            Gets the task that is being waited on.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.TaskCompletion">
            <summary>
            Gets the task wrapper task.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.Result">
            <summary>
            Gets the result of the given task.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.Status">
            <summary>
            Gets the status of the task.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.IsCompleted">
            <summary>
            Gets a value indicating whether the task is completed.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.IsNotCompleted">
            <summary>
            Gets a value indicating whether the task is not completed.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.IsSuccessfullyCompleted">
            <summary>
            Gets a value indicating whether the task was successfully completed.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.IsCanceled">
            <summary>
            Gets a value indicating whether the task was cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.IsFaulted">
            <summary>
            Gets a value indicating whether there was an error with the task.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.Exception">
            <summary>
            Gets the exception which occured on the task (if one occurred).
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.InnerException">
            <summary>
            Gets the inner exception of the task.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.ErrorMessage">
            <summary>
            Gets the error message of the task.
            </summary>
        </member>
        <member name="E:Microsoft.Toolkit.Helpers.NotifyTaskCompletion`1.PropertyChanged">
            <summary>
            PropertyChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.Toolkit.Helpers.Singleton`1">
            <summary>
            Obsolete see https://github.com/windows-toolkit/WindowsCommunityToolkit/issues/3134.
            </summary>
            <typeparam name="T">The type to be used for creating the Singleton instance.</typeparam>
            <example>
            Instead of this helper, migrate your code to this pattern instead:
            <code>
            // Setup Singleton
            public class MyClass
            {
                public static MyClass Instance { get; } = new MyClass();
            }
            </code></example>
        </member>
        <member name="P:Microsoft.Toolkit.Helpers.Singleton`1.Instance">
            <summary>
            Gets the instance of the Singleton class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
            <remarks>Internal copy of the .NET Standard 2.1 attribute.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that a given <see cref="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue" /> also indicates
            whether the method will not return (eg. throw an exception).
            </summary>
            <remarks>Internal copy of the .NET Standard 2.1 attribute.</remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the parameter value should be <see langword="true" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be <see langword="null" /> even if the corresponding type allows it.
            Specifies that an input argument was not <see langword="null" /> when the call returns.
            </summary>
            <remarks>Internal copy of the .NET Standard 2.1 attribute.</remarks>
        </member>
    </members>
</doc>