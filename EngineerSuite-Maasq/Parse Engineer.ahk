/*
Component:	Parse Engineer
  Version:	0.5.33
     Date:	10/09/19
 Revision:	Equipment basic parsing done
 */
 
PARE_Parse_Close:
PARE_ParseGuiEscape:
PARE_ParseGuiClose:			;{
	endLogging()
return						;}


;~ ######################################################
;~ #                   Function List.                   #
;~ ######################################################


ParseProject() {
	global
	
	RMan_npc:= 1
	RMan_spl:= 0
	
	if ModGmon
		xmlfile:= "db"
	else
		xmlfile:= "client"
	If ModLock
		xlock:= " static=""true"""
	else
		xlock:= ""
	startlogging()
	Create_Zip()
	If Zipfine {
		Copy_images()
		Copy_tokens()
		Build_definition_xml()
		Build_db_xml()
		Finalise_Zip()
	}
}

Create_Zip() {
	global
	zipname:= modpath . modfile . ".zip"
	zipfine:= 0
	If (FileExist(zipname)) {
		FileDelete, %zipname%
	}
	If (FileExist(modpath)) {
		hZip := ZipCreateFile(zipname)
		zipfine:= 1
		log("Module started.", 0, "purple")
		log("", 0)
	} else {
		msgbox There is a problem with your module path. %modpath% does not seem to exist.
	}
}

Copy_images() {
	global
	xml_image:= ""
	if ModImage {
		log("Copying image files to module.", 0, "purple")
		ZipWin := ZipAddFolder(hZip, "images")
		FilePattern:= ModPath . "input\images\*.jpg"
		LogFlag:= 0
		Loop Files, %FilePattern%
		{
			ZipDir:= "images\" . A_LoopFileName
			ZipWin := ZipAddFile(hZip, A_LoopFileFullPath, ZipDir)
			if (!ZipWin) {
				log("Error adding " A_LoopFileName " to " hzip ".", 1, "red")
				LogFlag:= 1
			} else {
				
				log("Image '" A_LoopFileName "' copied to module.", 1)
			}
		}
		if (LogFlag) {
			log("There were errors while adding images to the module.", 0, "red", "B")
			log("", 0)
		} else {
			log("Image files successfully copied.", 0, "green", "B")
			log("", 0)
		}
		xml_image .= tag("image", 1) Chr(10)
		
		For a, b in npc.object()
		{
			FilePattern:= ModPath . "input\images\" a ".jpg"
			Ifexist, %FilePattern%
			{
				xml_image .= tag("img_" XC(a) "_jpg", 3) Chr(10)
				xml_image .= Build_XML("locked", "1", "n", "0")
				xml_image .= Build_XML("name", NPC[a].name, "s", "0")
				xml_image .= tag("image type=""image""", 4) Chr(10)
				xml_image .= Build_XML("bitmap", "images/" XC(a) ".jpg", "s")
				xml_image .= tag("/image", 4) Chr(10)
				xml_image .= tag("/img_" XC(a) "_jpg", 3) Chr(10)
			}
		}
		xml_image .= tag("/image", 1) Chr(10)
		
		If ModRefMn {
			FilePattern:= A_ScriptDir . "\gfx\refmandiv.jpg"
			ZipDir:= "images\refmandiv.jpg"
			ZipWin := ZipAddFile(hZip, FilePattern, ZipDir)
			FilePattern:= A_ScriptDir . "\gfx\RM_NPC_Index.jpg"
			ZipDir:= "images\RM_NPC_Index.jpg"
			ZipWin := ZipAddFile(hZip, FilePattern, ZipDir)
		}
	}
}

Copy_tokens() {
	global
	if ModToken {
		log("Copying tokens to module.", 0, "purple")
		ZipWin := ZipAddFolder(hZip, "tokens\" . ModName)
		FilePattern:= ModPath . "input\tokens\*.png"
		LogFlag:= 0
		Loop Files, %FilePattern%
		{
			ZipDir:= "tokens\" . ModName . "\" . A_LoopFileName
			ZipWin := ZipAddFile(hZip, A_LoopFileFullPath, ZipDir)
			if (!ZipWin) {
				log("Error adding " A_LoopFileName " to " hzip ".", 1, "red")
				LogFlag:= 1
			} else {
				log("Token '" A_LoopFileName "' copied to module.", 1)
			}
		}
		if (LogFlag) {
			log("There were errors while adding tokens to the module.", 0, "red", "B")
		} else {
			log("Tokens successfully copied.", 0, "green", "B")
		}
	log("", 0)
	}
}

Finalise_Zip() {
	global
	xml_File:= ModPath . "thumbnail.png"
	If (FileExist(xml_File)) {
		ZipWin := ZipAddFile(hZip, xml_File)
		if (!ZipWin) {
			log("Error adding thumbnail image to module.", 0, "red", "B")
		} else {
			log("Thumbnail image added to module.", 0, "green", "B")
		}
	log("", 0)
	}

	ZipCloseFile(hzip)
	zipname:= modpath . modfile . ".zip"
	fgname:= fgpath . modfile . ".mod"
	filemove, %zipname%, %fgname%, 1
	log("Module complete.", 0, "green", "B")
}

Build_definition_xml() {
	global
	log("Creating definition.xml", 0, "purple")

	definition_xml:= ""
	definition_xml .= "<?xml version=""1.0"" encoding=""ISO-8859-1""?>" Chr(10)
	definition_xml .= "<!--" Chr(10)
	definition_xml .= "`tGenerated by Parse Engineer." Chr(10)
	definition_xml .= "`tWritten by Maasq (c) 2018." Chr(10)
	definition_xml .= "-->" Chr(10)
	definition_xml .= "<root version=""3.3"">" Chr(10)
	definition_xml .= "`t<name>" ModName "</name>" Chr(10)
	definition_xml .= "`t<category>" ModCate "</category>" Chr(10)
	definition_xml .= "`t<author>" ModAuth "</author>" Chr(10)
	definition_xml .= "`t<ruleset>5E</ruleset>" Chr(10)
	definition_xml .= "</root>"

	xml_File:= ModPath . "definition.xml"
	If (FileExist(xml_File)) {
		FileDelete, %xml_File%
	}
	FileAppend, %definition_xml%, %xml_File%
	ZipWin := ZipAddFile(hZip, xml_File)
	
	if (!ZipWin) {
		msgbox error adding definition.xml to %hzip%
	}
	
	If (FileExist(xml_File)) {
		FileDelete, %xml_File%			;clean up after copy
	}

	log("Created definition.xml successfully.", 0, "green")
}

Build_db_xml() {
	global
	log("Creating " xmlfile ".xml", 0, "purple")
	
	db_xml:= ""
	db_xml .= "<?xml version=""1.0"" encoding=""ISO-8859-1""?>" Chr(10)
	db_xml .= "<!--" Chr(10)
	db_xml .= "`tGenerated by Parse Engineer." Chr(10)
	db_xml .= "`tWritten by Maasq (c) 2018." Chr(10)
	db_xml .= "-->" Chr(10)
	db_xml .= "<root version=""3.3"">" Chr(10)
	db_xml .= xml_image
	
	db_xml .= tag("reference" xlock, 1) Chr(10)
		xml_reference()
	db_xml .= tag("/reference", 1) Chr(10)
	db_xml .= tag("lists", 1) Chr(10)
		xml_lists()
	db_xml .= tag("/lists", 1) Chr(10)
	db_xml .= tag("tables", 1) Chr(10)
		xml_tables()
	db_xml .= tag("/tables", 1) Chr(10)
	db_xml .= tag("library", 1) Chr(10)
		xml_library()
	db_xml .= tag("/library", 1) Chr(10)
	db_xml .= "</root>"

	xml_File:= ModPath . xmlfile . ".xml"
	If (FileExist(xml_File)) {
		FileDelete, %xml_File%
	}
	FileAppend, %db_xml%, %xml_File%
	ZipWin := ZipAddFile(hZip, xml_File)
	
	if (!ZipWin) {
		msgbox error adding %xmlfile%.xml to %hzip%
	}
	
	If (FileExist(xml_File)) {
		FileDelete, %xml_File%			;clean up after copy
	}

	log("Created " xmlfile ".xml successfully.", 0, "green", "B")
}

xml_reference() {
	global
	local lcatname
	log("Building Reference section", 0, "purple")

	If ModMonst {
		log("Adding NPCs", 0, "purple")
		db_xml .= tag("npcdata", 2) Chr(10)
		
		BuildCatList(NPC.object())
		
		For a,b in XMLCatList {
			lcatname:= b
			db_xml .= tag("category name=""" lcatname """ baseicon=""0"" decalicon=""0""", 3) Chr(10)
		
			For a, b in npc.object()
			{
				If (NPC[a].FGcat = lcatname) {
					db_xml .= tag(a, 4) Chr(10)
					db_xml .= Build_XML("locked", "1", "n")
					db_xml .= Build_XML("name", NPC[a].name, "s")
					If NPC[a].NoID
						db_xml .= Build_XML("nonid_name", NPC[a].NoID, "s")
					db_xml .= Build_XML("type", NPC[a].type, "s")
					db_xml .= Build_XML("alignment", NPC[a].alignment, "s")
					db_xml .= Build_XML("size", NPC[a].size, "s")
					db_xml .= Build_XML("ac", NPC[a].ac, "n")
					db_xml .= Build_XML("actext", NPC[a].actext, "s")
					db_xml .= Build_XML("hp", NPC[a].hp, "n")
					db_xml .= Build_XML("hd", NPC[a].hd, "s")
					db_xml .= Build_XML("speed", NPC[a].speed, "s")
					
					db_xml .= tag("abilities", 5) Chr(10)
						db_xml .= tag("strength", 6) Chr(10)
						db_xml .= Build_XML("score", NPC[a].strength, "n", "3")
						db_xml .= Build_XML("modifier", NPC[a].strengthmod, "s", "3")
						db_xml .= tag("/strength", 6) Chr(10)
						db_xml .= tag("dexterity", 6) Chr(10)
						db_xml .= Build_XML("score", NPC[a].dexterity, "n", "3")
						db_xml .= Build_XML("modifier", NPC[a].dexteritymod, "s", "3")
						db_xml .= tag("/dexterity", 6) Chr(10)
						db_xml .= tag("constitution", 6) Chr(10)
						db_xml .= Build_XML("score", NPC[a].constitution, "n", "3")
						db_xml .= Build_XML("modifier", NPC[a].constitutionmod, "s", "3")
						db_xml .= tag("/constitution", 6) Chr(10)
						db_xml .= tag("intelligence", 6) Chr(10)
						db_xml .= Build_XML("score", NPC[a].intelligence, "n", "3")
						db_xml .= Build_XML("modifier", NPC[a].intelligencemod, "s", "3")
						db_xml .= tag("/intelligence", 6) Chr(10)
						db_xml .= tag("wisdom", 6) Chr(10)
						db_xml .= Build_XML("score", NPC[a].wisdom, "n", "3")
						db_xml .= Build_XML("modifier", NPC[a].wisdommod, "s", "3")
						db_xml .= tag("/wisdom", 6) Chr(10)
						db_xml .= tag("charisma", 6) Chr(10)
						db_xml .= Build_XML("score", NPC[a].charisma, "n", "3")
						db_xml .= Build_XML("modifier", NPC[a].charismamod, "s", "3")
						db_xml .= tag("/charisma", 6) Chr(10)
					db_xml .= tag("/abilities", 5) Chr(10)

					if NPC[a].savingthrows
						db_xml .= Build_XML("savingthrows", NPC[a].savingthrows, "s")

					if NPC[a].skills
						db_xml .= Build_XML("skills", NPC[a].skills, "s")

					if NPC[a].damres
						db_xml .= Build_XML("damageresistances", NPC[a].damres, "s")

					if NPC[a].damvul
						db_xml .= Build_XML("damagevulnerabilities", NPC[a].damvul, "s")

					if NPC[a].damimm
						db_xml .= Build_XML("damageimmunities", NPC[a].damimm, "s")

					if NPC[a].conimm
						db_xml .= Build_XML("conditionimmunities", NPC[a].conimm, "s")
					
					db_xml .= Build_XML("senses", NPC[a].senses, "s")
					db_xml .= Build_XML("languages", NPC[a].languages, "s")
					db_xml .= Build_XML("cr", NPC[a].cr, "s")
					db_xml .= Build_XML("xp", NPC[a].xp, "n")

					db_xml .= tag("traits", 5) Chr(10)
						xml_id:= 1
						if NPC[a].castinginnate {
							id_tag:= Format("id-{:05}", xml_id)
							db_xml .= tag(id_tag, 6) Chr(10)
							If 	NPC[a].psionics
								db_xml .= Build_XML("name", "Innate Spellcasting (Psionics)", "s", "3")
							Else
								db_xml .= Build_XML("name", "Innate Spellcasting", "s", "3")
							
							db_xml .= Build_XML("desc", NPC[a].castinginnate, "s", "3")
							db_xml .= tag("/" id_tag, 6) Chr(10)
							xml_id += 1
						}
						if NPC[a].casting {
							id_tag:= Format("id-{:05}", xml_id)
							db_xml .= tag(id_tag, 6) Chr(10)
							db_xml .= Build_XML("name", "Spellcasting", "s", "3")
							db_xml .= Build_XML("desc", NPC[a].casting, "s", "3")
							db_xml .= tag("/" id_tag, 6) Chr(10)
							xml_id += 1
						}
						loop % NPC[a].traitnumber {
							id_tag:= Format("id-{:05}", xml_id)
							trnam:= "trait" A_Index
							trtxt:= "trait" A_Index "text"

							db_xml .= tag(id_tag, 6) Chr(10)
							db_xml .= Build_XML("name", NPC[a][trnam], "s", "3")
							db_xml .= Build_XML("desc", NPC[a][trtxt], "s", "3")
							db_xml .= tag("/" id_tag, 6) Chr(10)
							xml_id += 1
						}
					db_xml .= tag("/traits", 5) Chr(10)

					If % NPC[a].actionnumber {
						db_xml .= tag("actions", 5) Chr(10)
							xml_id:= 1
							loop % NPC[a].actionnumber {
								id_tag:= Format("id-{:05}", xml_id)
								trnam:= "action" A_Index
								trtxt:= "action" A_Index "text"

								db_xml .= tag(id_tag, 6) Chr(10)
								db_xml .= Build_XML("name", NPC[a][trnam], "s", "3")
								db_xml .= Build_XML("desc", NPC[a][trtxt], "s", "3")
								db_xml .= tag("/" id_tag, 6) Chr(10)
								xml_id += 1
							}
						db_xml .= tag("/actions", 5) Chr(10)
					}

					If % NPC[a].reactionnumber {
						db_xml .= tag("reactions", 5) Chr(10)
							xml_id:= 1
							loop % NPC[a].reactionnumber {
								id_tag:= Format("id-{:05}", xml_id)
								trnam:= "reaction" A_Index
								trtxt:= "reaction" A_Index "text"

								db_xml .= tag(id_tag, 6) Chr(10)
								db_xml .= Build_XML("name", NPC[a][trnam], "s", "3")
								db_xml .= Build_XML("desc", NPC[a][trtxt], "s", "3")
								db_xml .= tag("/" id_tag, 6) Chr(10)
								xml_id += 1
							}
						db_xml .= tag("/reactions", 5) Chr(10)
					}

					If % NPC[a].legendaryactionnumber {
						db_xml .= tag("legendaryactions", 5) Chr(10)
							xml_id:= 1
							loop % NPC[a].legendaryactionnumber {
								id_tag:= Format("id-{:05}", xml_id)
								trnam:= "legendaryaction" A_Index
								trtxt:= "legendaryaction" A_Index "text"

								db_xml .= tag(id_tag, 6) Chr(10)
								db_xml .= Build_XML("name", NPC[a][trnam], "s", "3")
								db_xml .= Build_XML("desc", NPC[a][trtxt], "s", "3")
								db_xml .= tag("/" id_tag, 6) Chr(10)
								xml_id += 1
							}
						db_xml .= tag("/legendaryactions", 5) Chr(10)
					}

					If % NPC[a].lairactionnumber {
						db_xml .= tag("lairactions", 5) Chr(10)
							xml_id:= 1
							loop % NPC[a].lairactionnumber {
								id_tag:= Format("id-{:05}", xml_id)
								trnam:= "lairaction" A_Index
								trtxt:= "lairaction" A_Index "text"

								db_xml .= tag(id_tag, 6) Chr(10)
								db_xml .= Build_XML("name", NPC[a][trnam], "s", "3")
								db_xml .= Build_XML("desc", NPC[a][trtxt], "s", "3")
								db_xml .= tag("/" id_tag, 6) Chr(10)
								xml_id += 1
							}
						db_xml .= tag("/lairactions", 5) Chr(10)
					}
					
					db_xml .= Build_XML("token", NPC[a].token, "t")
					db_xml .= NPC[a].description Chr(10)
					db_xml .= tag("/" a, 4) Chr(10)
					;~ log(NPC[a].name " added successfully.", 3)
				}
			}

			db_xml .= tag("/category", 3) Chr(10)
		}
		db_xml .= tag("/npcdata", 2) Chr(10)
		log("NPCs completed successfully.", 0, "green")
	}

	If ModSpell {
		log("Adding spells", 0, "purple")
		db_xml .= tag("spelldata", 2) Chr(10)
		
		BuildCatList(SPL.object())
		
		For a,b in XMLCatList {
			lcatname:= b
			db_xml .= tag("category name=""" lcatname """ baseicon=""0"" decalicon=""0""", 3) Chr(10)
		
			For a, b in SPL.object()
			{
				If (SPL[a].FGcat = lcatname) {
					db_xml .= tag(a, 4) Chr(10)
					db_xml .= Build_XML("locked", "1", "n")
					db_xml .= Build_XML("name", SPL[a].name, "s")
					db_xml .= Build_XML("level", SPL[a].level, "n")
					db_xml .= Build_XML("school", SPL[a].school, "s")
					db_xml .= Build_XML("ritual", SPL[a].ritual, "n")
					db_xml .= Build_XML("castingtime", SPL[a].castingtime, "s")
					db_xml .= Build_XML("range", SPL[a].range, "s")
					db_xml .= Build_XML("components", SPL[a].components, "s")
					db_xml .= Build_XML("duration", SPL[a].duration, "s")
					db_xml .= SPL[a].description Chr(10)
					db_xml .= Build_XML("source", SPL[a].source, "s")

					db_xml .= tag("/" a, 4) Chr(10)
				}
				;~ log(SPL[a].name " added successfully.", 3)
			}
			db_xml .= tag("/category", 3) Chr(10)
		}
		db_xml .= tag("/spelldata", 2) Chr(10)
		log("Spells completed successfully.", 0, "green")
	}

	If ModEquip {
		log("Adding equipment", 0, "purple")
		;{ Equipment Data
		db_xml .= tag("equipmentdata static=""true""", 2) Chr(10)
		
		BuildCatList(EQP.object())
		
		For a,b in XMLCatList {
			lcatname:= b
			db_xml .= tag("category name=""" lcatname """ baseicon=""0"" decalicon=""0""", 3) Chr(10)
		
			For a, b in EQP.object()
			{
				If (EQP[a].FGcat = lcatname) {
					db_xml .= tag(a, 4) Chr(10)
					db_xml .= Build_XML("locked", EQP[a].locked, "n")
					;~ db_xml .= Build_XML("isidentified", 1, "n")
					db_xml .= Build_XML("name", EQP[a].name, "s")
					db_xml .= Build_XML("type", EQP[a].type, "s")
					db_xml .= Build_XML("subtype", EQP[a].subtype, "s")
					db_xml .= Build_XML("cost", EQP[a].cost, "s")

					If (EQP[a].type = "Adventuring Gear") {
						db_xml .= Build_XML("weight", EQP[a].Weight, "n")
					}
					If (EQP[a].type = "Armor") {
						db_xml .= Build_XML("weight", EQP[a].Weight, "n")
						db_xml .= Build_XML("ac", EQP[a].AC, "n")
						db_xml .= Build_XML("dexbonus", EQP[a].armourdexbonus, "s")
						db_xml .= Build_XML("strength", EQP[a].ArmourStr, "s")
						db_xml .= Build_XML("stealth", EQP[a].armourstealth, "s")
					}
					If (EQP[a].type = "Weapon") {
						db_xml .= Build_XML("weight", EQP[a].Weight, "n")
						db_xml .= Build_XML("damage", EQP[a].damage, "s")
						db_xml .= Build_XML("properties", EQP[a].Properties, "s")
					}
					If (EQP[a].type = "Tools") {
						db_xml .= Build_XML("weight", EQP[a].Weight, "n")
					}
					If (EQP[a].type = "Mounts and Other Animals") {
						db_xml .= Build_XML("speed", EQP[a].speed, "s")
						db_xml .= Build_XML("carryingcapacity", EQP[a].carryingcapacity, "s")
					}
					If (EQP[a].type = "Tack, Harness, and Drawn Vehicles") {
						db_xml .= Build_XML("weight", EQP[a].Weight, "n")
					}
					If (EQP[a].type = "Waterborne Vehicles") {
						db_xml .= Build_XML("speed", EQP[a].speed, "s")
					}
					If (EQP[a].type = "Treasure") {
						db_xml .= Build_XML("weight", EQP[a].Weight, "n")
					}

					db_xml .= EQP[a].description Chr(10)
					
					db_xml .= tag("/" a, 4) Chr(10)
				}
			}
			db_xml .= tag("/category", 3) Chr(10)
		}
		db_xml .= tag("/equipmentdata", 2) Chr(10)
		;} Equipment Data
		;{ Equipment Lists
		db_xml .= tag("equipmentlists", 2) Chr(10)
		
		db_xml .= EQE_Llist()
		if HasVal(XMLTypeList, "Adventuring Gear") {
			BuildSubTypeList(EQP.object(), "Adventuring Gear")
			db_xml .= tag("adventuringgeartable", 3) Chr(10)
			db_xml .= Build_XML("description", "Adventuring Gear Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Ammunition") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Adventuring Gear") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				if (b = "Arcane Focus") {
					db_xml .= tag("section001", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Adventuring Gear") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section001", 5) Chr(10)
				}
				if (b = "Druidic Focus") {
					db_xml .= tag("section002", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Adventuring Gear") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section002", 5) Chr(10)
				}
				if (b = "Holy Symbol") {
					db_xml .= tag("section003", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Adventuring Gear") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section003", 5) Chr(10)
				}
				if (b = "Equipment Kits") {
					db_xml .= tag("section004", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Adventuring Gear") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section004", 5) Chr(10)
				}
				if (b = "Equipment Packs") {
					db_xml .= tag("section005", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Adventuring Gear") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section005", 5) Chr(10)
				}
				if (b = "Standard") {
					db_xml .= tag("section006", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Adventuring Gear") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section006", 5) Chr(10)
				}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/adventuringgeartable", 3) Chr(10)
			}			
		}
		if HasVal(XMLTypeList, "Armor") {
			BuildSubTypeList(EQP.object(), "Armor")
			db_xml .= tag("armortable", 3) Chr(10)
			db_xml .= Build_XML("description", "Armor Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Light Armor") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Armor") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_armor", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("ac", EQP[c].ac, "s", "4")
							db_xml .= Build_XML("dexbonus", EQP[c].armourdexbonus, "s", "4")
							db_xml .= Build_XML("strength", EQP[c].ArmourStr, "s", "4")
							db_xml .= Build_XML("stealth", EQP[c].armourstealth, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				if (b = "Medium Armor") {
					db_xml .= tag("section001", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Armor") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_armor", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("ac", EQP[c].ac, "s", "4")
							db_xml .= Build_XML("dexbonus", EQP[c].armourdexbonus, "s", "4")
							db_xml .= Build_XML("strength", EQP[c].ArmourStr, "s", "4")
							db_xml .= Build_XML("stealth", EQP[c].armourstealth, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section001", 5) Chr(10)
				}
				if (b = "Heavy Armor") {
					db_xml .= tag("section002", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Armor") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_armor", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("ac", EQP[c].ac, "s", "4")
							db_xml .= Build_XML("dexbonus", EQP[c].armourdexbonus, "s", "4")
							db_xml .= Build_XML("strength", EQP[c].ArmourStr, "s", "4")
							db_xml .= Build_XML("stealth", EQP[c].armourstealth, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section002", 5) Chr(10)
				}
				if (b = "Shield") {
					db_xml .= tag("section003", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Armor") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_armor", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("ac", EQP[c].ac, "s", "4")
							db_xml .= Build_XML("dexbonus", EQP[c].armourdexbonus, "s", "4")
							db_xml .= Build_XML("strength", EQP[c].ArmourStr, "s", "4")
							db_xml .= Build_XML("stealth", EQP[c].armourstealth, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section003", 5) Chr(10)
				}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/armortable", 3) Chr(10)
			}			
		}
		if HasVal(XMLTypeList, "Weapon") {
			BuildSubTypeList(EQP.object(), "Weapon")
			db_xml .= tag("weapontable", 3) Chr(10)
			db_xml .= Build_XML("description", "Weapon Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Simple Melee Weapons") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Weapon") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_weapon", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("damage", EQP[c].damage, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= Build_XML("properties", EQP[c].properties, "s", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				if (b = "Simple Ranged Weapons") {
					db_xml .= tag("section001", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Weapon") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_weapon", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("damage", EQP[c].damage, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= Build_XML("properties", EQP[c].properties, "s", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section001", 5) Chr(10)
				}
				if (b = "Martial Melee Weapons") {
					db_xml .= tag("section002", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Weapon") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_weapon", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("damage", EQP[c].damage, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= Build_XML("properties", EQP[c].properties, "s", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section002", 5) Chr(10)
				}
				if (b = "Martial Ranged Weapons") {
					db_xml .= tag("section003", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Weapon") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_weapon", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("damage", EQP[c].damage, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= Build_XML("properties", EQP[c].properties, "s", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section003", 5) Chr(10)
				}
				;~ if (b = "Simple Melee Weapons") {
					;~ db_xml .= tag("section000", 5) Chr(10)
					;~ db_xml .= Build_XML("description", b, "s", "4")
					;~ db_xml .= tag("equipment", 6) Chr(10)
					;~ for c,d in EQP.object() {
						;~ if (EQP[c].type = "Weapon") AND (EQP[c].subtype = b) {
							;~ db_xml .= tag(c, 7) Chr(10)
							;~ db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							;~ db_xml .= Build_XML("class", "reference_weapon", "", "7")
							;~ db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "8")
							;~ db_xml .= tag("/link", 8) Chr(10)
							;~ db_xml .= Build_XML("name", EQP[c].name, "s", "6")
							;~ db_xml .= Build_XML("cost", EQP[c].cost, "s", "6")
							;~ db_xml .= Build_XML("damage", EQP[c].damage, "s", "6")
							;~ db_xml .= Build_XML("weight", EQP[c].weight, "n", "6")
							;~ db_xml .= Build_XML("properties", EQP[c].properties, "s", "6")
							;~ db_xml .= tag("/" c, 7) Chr(10)
						;~ }
					;~ }
					;~ db_xml .= tag("/equipment", 6) Chr(10)
					;~ db_xml .= tag("/section000", 5) Chr(10)
				;~ }
			}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/weapontable", 3) Chr(10)
		}
		if HasVal(XMLTypeList, "Tools") {
			BuildSubTypeList(EQP.object(), "Tools")
			db_xml .= tag("toolstable", 3) Chr(10)
			db_xml .= Build_XML("description", "Tools Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Artisan's Tools") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Tools") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				if (b = "Kits/Sets") {
					db_xml .= tag("section001", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Tools") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section001", 5) Chr(10)
				}
				if (b = "Gaming Set") {
					db_xml .= tag("section002", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Tools") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section002", 5) Chr(10)
				}
				if (b = "Musical Instrument") {
					db_xml .= tag("section003", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Tools") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section003", 5) Chr(10)
				}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/toolstable", 3) Chr(10)
			}			
		}
		if HasVal(XMLTypeList, "Mounts and Other Animals") {
			BuildSubTypeList(EQP.object(), "Mounts and Other Animals")
			db_xml .= tag("mountsandotheranimalstable", 3) Chr(10)
			db_xml .= Build_XML("description", "Mounts and Other Animals Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Mounts & Animals") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Mounts and Other Animals") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_mountsandotheranimals", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("speed", EQP[c].speed, "s", "4")
							db_xml .= Build_XML("carryingcapacity", EQP[c].carryingcapacity, "s", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/mountsandotheranimalstable", 3) Chr(10)
			}			
		}
		if HasVal(XMLTypeList, "Tack, Harness, and Drawn Vehicles") {
			BuildSubTypeList(EQP.object(), "Tack, Harness, and Drawn Vehicles")
			db_xml .= tag("tackharnesstable", 3) Chr(10)
			db_xml .= Build_XML("description", "Tack, Harness, and Drawn Vehicles Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Tack & Harness") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Tack, Harness, and Drawn Vehicles") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				if (b = "Drawn Vehicles") {
					db_xml .= tag("section001", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Tack, Harness, and Drawn Vehicles") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section001", 5) Chr(10)
				}
				if (b = "Saddle") {
					db_xml .= tag("section002", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Tack, Harness, and Drawn Vehicles") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section002", 5) Chr(10)
				}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/tackharnesstable", 3) Chr(10)
			}			
			
		}
		if HasVal(XMLTypeList, "Waterborne Vehicles") {
			BuildSubTypeList(EQP.object(), "Waterborne Vehicles")
			db_xml .= tag("waterbornevehiclestable", 3) Chr(10)
			db_xml .= Build_XML("description", "Waterborne Vehicles Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Surface Vehicles") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Waterborne Vehicles") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_waterbornevehicles", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("speed", EQP[c].speed, "s", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/waterbornevehiclestable", 3) Chr(10)
			}			
		}
		if HasVal(XMLTypeList, "Treasure") {
			BuildSubTypeList(EQP.object(), "Treasure")
			db_xml .= tag("treasuretable", 3) Chr(10)
			db_xml .= Build_XML("description", "Treasure Table", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)
			
			For a,b in XMLSubTypeList {
				if (b = "Art Objects (25 gp)") {
					db_xml .= tag("section000", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section000", 5) Chr(10)
				}
				if (b = "Art Objects (250 gp)") {
					db_xml .= tag("section001", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section001", 5) Chr(10)
				}
				if (b = "Art Objects (750 gp)") {
					db_xml .= tag("section002", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section002", 5) Chr(10)
				}
				if (b = "Art Objects (2,500 gp)") {
					db_xml .= tag("section003", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section003", 5) Chr(10)
				}
				if (b = "Art Objects (7,500 gp)") {
					db_xml .= tag("section004", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section004", 5) Chr(10)
				}
				if (b = "Gemstones (10 gp)") {
					db_xml .= tag("section005", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section005", 5) Chr(10)
				}
				if (b = "Gemstones (50 gp)") {
					db_xml .= tag("section006", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section006", 5) Chr(10)
				}
				if (b = "Gemstones (100 gp)") {
					db_xml .= tag("section007", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section007", 5) Chr(10)
				}
				if (b = "Gemstones (500 gp)") {
					db_xml .= tag("section008", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section008", 5) Chr(10)
				}
				if (b = "Gemstones (1,000 gp)") {
					db_xml .= tag("section009", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section009", 5) Chr(10)
				}
				if (b = "Gemstones (5,000 gp)") {
					db_xml .= tag("section010", 5) Chr(10)
					db_xml .= Build_XML("description", b, "s", "2")
					db_xml .= tag("equipment", 6) Chr(10)
					for c,d in EQP.object() {
						if (EQP[c].type = "Treasure") AND (EQP[c].subtype = b) {
							db_xml .= tag(c, 7) Chr(10)
							db_xml .= tag("link type=""windowreference""", "8") Chr(10)
							db_xml .= Build_XML("class", "reference_equipment", "", "5")
							db_xml .= Build_XML("recordname", "reference.equipmentdata." XC(c), "", "5")
							db_xml .= tag("/link", 8) Chr(10)
							db_xml .= Build_XML("name", EQP[c].name, "s", "4")
							db_xml .= Build_XML("cost", EQP[c].cost, "s", "4")
							db_xml .= Build_XML("weight", EQP[c].weight, "n", "4")
							db_xml .= tag("/" c, 7) Chr(10)
						}
					}
					db_xml .= tag("/equipment", 6) Chr(10)
					db_xml .= tag("/section010", 5) Chr(10)
				}
				
			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/treasuretable", 3) Chr(10)
			}			
		}
		
		db_xml .= tag("/equipmentlists", 2) Chr(10)
		;} Equipment Lists
		log("Equipment completed successfully.", 0, "green")
	}

	If ModRefMn {
		log("Adding reference manual pages", 0, "purple")
		db_xml .= tag("referencemanual", 2) Chr(10)
		db_xml .= Build_XML("name", ModName, "s", "-1")		
		db_xml .= tag("chapters", 3) Chr(10)
		db_xml .= tag("chapter_00", 4) Chr(10)
		db_xml .= Build_XML("name", ModName, "s", "1")
		db_xml .= tag("subchapters", 5) Chr(10)
		
		If RMan_npc {
			db_xml .= tag("subchapter_30", 6) Chr(10)
			db_xml .= Build_XML("name", "NPCs", "s", "3")
			db_xml .= tag("refpages", 7) Chr(10)
			
			log("Adding 'Reference Manual NPC index'.", 2, "purple")
			RMNPCIndex:= ""

			ObjGroup:= {}
			
			loop, 14
				ObjGroup[A_Index]:= {}

			ObjGroup[1].name:= "aberration"
			ObjGroup[2].name:= "beast"
			ObjGroup[3].name:= "celestial"
			ObjGroup[4].name:= "construct"
			ObjGroup[5].name:= "dragon"
			ObjGroup[6].name:= "elemental"
			ObjGroup[7].name:= "fey"
			ObjGroup[8].name:= "fiend"
			ObjGroup[9].name:= "giant"
			ObjGroup[10].name:= "humanoid"
			ObjGroup[11].name:= "monstrosity"
			ObjGroup[12].name:= "ooze"
			ObjGroup[13].name:= "plant"
			ObjGroup[14].name:= "undead"

			Calculate_Split()
			
			RM_NPCIndex1 =
(
								<bb-indextype>
									<name type="string">(Index)</name>
									<blocks>
										<id000009>
											<align type="string">center</align>
											<size type="string">525,220</size>
											<image type="image"><bitmap>images/RM_NPC_Index.jpg</bitmap></image>
											<blocktype type="string">image</blocktype>
										</id000009>
										<id000010>
											<blocktype type="string">text</blocktype>
											<align type="string">left,right</align>
											<text type="formattedtext">
										
)
			RM_NPCIndex1:= "`t`t`t`t`t`t`t`t" RM_NPCIndex1

			RMNPCIndex .= RM_NPCIndex1

			Loop, 14 {
				if (ObjGroup[A_Index].column = "1") {
					refmantp(A_Index, ObjGroup[A_Index].name)
				}
			}
			
			RM_NPCIndex7 =
(
											</text>
											<text2 type="formattedtext">
							
)
			RMNPCIndex .= "`t`t`t`t`t`t`t`t`t`t`t" RM_NPCIndex7

			Loop, 14 {
				if (ObjGroup[A_Index].column = "2") {
					refmantp(A_Index, ObjGroup[A_Index].name)
				}
			}

			RM_NPCIndex4 =
(
											</text2>
										</id000010>
										<id100070>
											<blocktype type="string">image</blocktype>
											<align type="string">center</align>
											<size type="string">400,1</size>
											<image type="image"><bitmap>images/refmandiv.jpg</bitmap></image>
											<caption type="string">Built by NPC Engineer (www.masq.net)</caption>
										</id100070>
									</blocks>
									<listlink type="windowreference">
										<class>reference_manualtextwide</class>
										<recordname>..</recordname>
										<description field="name"/>
									</listlink>
							</bb-indextype>
							
)
			RM_NPCIndex4:= "`t`t`t`t`t`t`t`t`t`t`t" RM_NPCIndex4

			RMNPCIndex .= RM_NPCIndex4
			db_xml .= RMNPCIndex
			
			log("Adding 'Reference Manual - NPCs'.", 2, "purple")		
			For a, b in NPC.object()
			{
				
				db_xml .= tag("xx-"a, 8) Chr(10)
				tempwords:= NPC[a].XML
				stringreplace, tempwords, tempwords, \r, `&#13`;, All
				db_xml .= tempwords
				db_xml .= tag("listlink type=""windowreference""", 9) Chr(10)
				db_xml .= Build_XML("class", "reference_manualtextwide", , "6")
				db_xml .= Build_XML("recordname", "..", , "6")
				db_xml .= tag("description field=""name""/", 10) Chr(10)
				db_xml .= tag("/listlink", 9) Chr(10)

				db_xml .= tag("/xx-" a, 8) Chr(10)
				log(NPC[a].name " page added successfully.", 3)
			}
			db_xml .= tag("/refpages", 7) Chr(10)
			db_xml .= tag("/subchapter_30", 6) Chr(10)
			log("Completed 'Reference Manual - NPCs'.", 2, "green")
		}
		
		If RMan_spl {
			db_xml .= tag("subchapter_31", 6) Chr(10)
			db_xml .= Build_XML("name", "Spells", "s", "3")
			db_xml .= tag("refpages", 7) Chr(10)
			log("Adding 'Reference Manual - Spells'.", 2, "purple")

			local loopy, present
			present:= 0
			Loop, 9 {
				loopy:= A_Index
				For a, b in SPL.Object()
				{
					if (loopy = SubStr(SPL[a].level,1,1)) {
						Present:= 1
					}
				}
				if present {
					for a, b in SPL.object()
					{
						if (loopy = SubStr(SPL[a].level,1,1)) {
							;~ m(loopy, SPL[a].name, SPL[a].level)
						}
					}
				}
			}


			db_xml .= tag("/refpages", 7) Chr(10)
			db_xml .= tag("/subchapter_31", 6) Chr(10)
			log("Completed 'Reference Manual - Spells'.", 2, "green")
		}
		
		db_xml .= tag("/subchapters", 5) Chr(10)
		db_xml .= tag("/chapter_00", 4) Chr(10)
		db_xml .= tag("/chapters", 3) Chr(10)
		db_xml .= tag("/referencemanual", 2) Chr(10)
		log("Reference manual pages completed successfully.", 0, "green")
	}

	log("Reference section completed successfully.", 0, "green", "B")
}

xml_lists() {
	global
	
	GMTerr:= 0
	GMMyth:= 0
	For a, b in NPC.Object()
	{
		if NPC[a].terrain {
			GMTerr:= 1
		}
		if NPC[a].lore {
			GMMyth:= 1
		}
	}
	
	log("Building Lists section", 0, "purple")
	
	If ModMonst {
		db_xml .= tag("monsters", 2) Chr(10)
		db_xml .= Llist()
		
;{ Listing of NPCs sorted alphabetically
		log("Adding 'NPCs - sorted alphabetically'.", 2, "purple")		
		db_xml .= tag("byletter", 3) Chr(10)
		db_xml .= Build_XML("description", "NPCs by Name", "s", "0")
		db_xml .= tag("groups", 4) Chr(10)

		Loop {
			Group_title:= Chr(64+A_Index)
			ObjSelect:= "^" . Group_title
			GroupMembers:= 0
			For a, b in NPC.Object()
			{
				if (NPC[a].name ~= ObjSelect) {
					If !GroupMembers
						log("Adding Group " Group_title ".", 3)		
					GroupMembers:= 1
				}
			}
			If GroupMembers {
				db_xml .= tag("typeletter" Group_title, 5) Chr(10)
				db_xml .= Build_XML("description", Group_title, "s", "2")
				db_xml .= tag("index", 6) Chr(10)
				For a, b in NPC.Object()
				{
					if (NPC[a].name ~= ObjSelect) {
						db_xml .= tag(a, 7) Chr(10)
						db_xml .= Build_XML("name", NPC[a].name, "s", "4")
						db_xml .= tag("link type=""windowreference""", 8) Chr(10)
						db_xml .= Build_XML("class", "npc", "", "5")
						db_xml .= Build_XML("recordname", "reference.npcdata." XC(a), "", "5")
						db_xml .= tag("/link", 8) Chr(10)
						db_xml .= tag("/" a, 7) Chr(10)
					}
				}	
				db_xml .= tag("/index", 6) Chr(10)
				db_xml .= tag("/typeletter" Group_title, 5) Chr(10)
			}
		} Until (A_Index = 26)
		db_xml .= tag("/groups", 4) Chr(10)
		db_xml .= tag("/byletter", 3) Chr(10)
		log("Completed 'NPCs - sorted alphabetically'.", 2, "green")
;}

;{ Listing of NPCs sorted by challenge rating
		log("Adding 'NPCs - sorted by Challenge Rating'.", 2, "purple")		
		db_xml .= tag("bycr", 3) Chr(10)
		db_xml .= Build_XML("description", "NPCs by CR", "s", "0")
		db_xml .= tag("groups", 4) Chr(10)

		cr(0, "0")
		cr(1, "1/8")
		cr(2, "1/4")
		cr(3, "1/2")
		
		Loop {
			cr(A_Index + 3, A_Index)
		} Until (A_Index = 40)
		
		
		db_xml .= tag("/groups", 4) Chr(10)
		db_xml .= tag("/bycr", 3) Chr(10)
		log("Completed 'NPCs - sorted by Challenge Rating'.", 2, "green")
;}

;{ Listing of NPCs sorted by class
		log("Adding 'NPCs - sorted by Class'.", 2, "purple")		
		db_xml .= tag("bytype", 3) Chr(10)
		db_xml .= Build_XML("description", "NPCs by Class", "s", "0")
		db_xml .= tag("groups", 4) Chr(10)

		tp(1, "aberration")
		tp(2, "beast")
		tp(3, "celestial")
		tp(4, "construct")
		tp(5, "dragon")
		tp(6, "elemental")
		tp(7, "fey")
		tp(8, "fiend")
		tp(9, "giant")
		tp(10, "humanoid")
		tp(11, "monstrosity")
		tp(12, "ooze")
		tp(13, "plant")
		tp(14, "undead")

		db_xml .= tag("/groups", 4) Chr(10)
		db_xml .= tag("/bytype", 3) Chr(10)
		log("Completed 'NPCs - sorted by Class'.", 2, "green")
;}

;{ Listing of NPCs sorted by Terrain
		If GMTerr {
			log("Adding 'NPCs - sorted by Terrain'.", 2, "purple")		
			db_xml .= tag("byterrain", 3) Chr(10)
			db_xml .= Build_XML("description", "NPCs by Terrain Type", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)

			loop % terraintype.length() {
				tr(A_Index, terraintype[A_Index])
			}

			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/byterrain", 3) Chr(10)
			log("Completed 'NPCs - sorted by Terrain'.", 2, "green")
		}
;}

;{ Listing of NPCs sorted by Mythology
		If GMMyth {
			log("Adding 'NPCs - sorted by Mythology'.", 2, "purple")		
			db_xml .= tag("bymythology", 3) Chr(10)
			db_xml .= Build_XML("description", "NPCs by Mythology", "s", "0")
			db_xml .= tag("groups", 4) Chr(10)

			loop % originlore.length() {
				ol(A_Index, originlore[A_Index])
			}

			db_xml .= tag("/groups", 4) Chr(10)
			db_xml .= tag("/bymythology", 3) Chr(10)
			log("Completed 'NPCs - sorted by Mythology'.", 2, "green")
		}
;}

		db_xml .= tag("/monsters", 2) Chr(10)
	}
	If ModSpell {
		db_xml .= tag("spells", 2) Chr(10)
		db_xml .= SpLlist()

;{ Listing of spells sorted by Class
		log("Adding 'Spells - sorted by Class'.", 2, "purple")		
		db_xml .= tag("byclass", 3) Chr(10)
		db_xml .= Build_XML("name", "Spells by Class", "s", "0")
		db_xml .= tag("index", 4) Chr(10)

		GroupMem:= []
		loop % SpCasters.length() {
			ca(A_Index, SpCasters[A_Index])
		}
		db_xml .= tag("/index", 4) Chr(10)

		for key, val in GroupMem
		{
			db_xml .= tag(XC(val), 4) Chr(10)
			db_xml .= Build_XML("description", val " Spells", "s", "1")
			db_xml .= tag("groups", 5) Chr(10)
			
			sl("Cantrips", "cantrip", val)
			sl("Level 1 Spells", "1st level", val)
			sl("Level 2 Spells", "2nd level", val)
			sl("Level 3 Spells", "3rd level", val)
			sl("Level 4 Spells", "4th level", val)
			sl("Level 5 Spells", "5th level", val)
			sl("Level 6 Spells", "6th level", val)
			sl("Level 7 Spells", "7th level", val)
			sl("Level 8 Spells", "8th level", val)
			sl("Level 9 Spells", "9th level", val)
			
			db_xml .= tag("/groups", 5) Chr(10)
			db_xml .= tag("/"XC(val), 4) Chr(10)
		}
		db_xml .= tag("/byclass", 3) Chr(10)
		log("Completed 'Spells - sorted by Class'.", 2, "green")
;}

		db_xml .= tag("/spells", 2) Chr(10)
	}
	If ModEquip {
		;~ db_xml .= tag("item", 2) Chr(10)
		;~ db_xml .= EQE_Llist()

;~ ;{ Listing of Items sorted by Category
		;~ log("Adding 'Items - sorted by category'.", 2, "purple")		
		;~ db_xml .= tag("bycategory", 3) Chr(10)
		;~ db_xml .= Build_XML("name", "Items by category", "s", "0")
		;~ db_xml .= tag("index", 4) Chr(10)

		;~ GroupMem:= []
		;~ loop % SpCasters.length() {
			;~ ca(A_Index, SpCasters[A_Index])
		;~ }
		;~ db_xml .= tag("/index", 4) Chr(10)

		;~ for key, val in GroupMem
		;~ {
			;~ db_xml .= tag(XC(val), 4) Chr(10)
			;~ db_xml .= Build_XML("description", val " Spells", "s", "1")
			;~ db_xml .= tag("groups", 5) Chr(10)
			
			;~ sl("Cantrips", "cantrip", val)
			;~ sl("Level 1 Spells", "1st level", val)
			;~ sl("Level 2 Spells", "2nd level", val)
			;~ sl("Level 3 Spells", "3rd level", val)
			;~ sl("Level 4 Spells", "4th level", val)
			;~ sl("Level 5 Spells", "5th level", val)
			;~ sl("Level 6 Spells", "6th level", val)
			;~ sl("Level 7 Spells", "7th level", val)
			;~ sl("Level 8 Spells", "8th level", val)
			;~ sl("Level 9 Spells", "9th level", val)
			
			;~ db_xml .= tag("/groups", 5) Chr(10)
			;~ db_xml .= tag("/"XC(val), 4) Chr(10)
		;~ }
		;~ db_xml .= tag("/byclass", 3) Chr(10)
		;~ log("Completed 'Spells - sorted by Class'.", 2, "green")
;~ ;}

		;~ db_xml .= tag("/spells", 2) Chr(10)
	}


	log("Lists section completed successfully.", 0, "green", "B")
}

xml_tables() {
	global
	local lcat, lval, rowv, tmp, isalink, rcrdnm, lcatname
	
	If ModTable {
		log("Building Tables section", 1, "purple")
		BuildCatList(TBL.object())
		
		For a,b in XMLCatList {
			lcatname:= b
			db_xml .= tag("category name=""" lcatname """ baseicon=""0"" decalicon=""0""", 2) Chr(10)
		
			For a, b in TBL.Object()
			{
				If (TBL[a].FGcat = lcatname) {
					db_xml .= tag(a, 3) Chr(10)
					db_xml .= Build_XML("description", TBL[a].description, "s", "0")
					db_xml .= Build_XML("dice", TBL[a].dice, "d", "0")
					db_xml .= Build_XML("hiderollresults", TBL[a].showroll, "n", "0")
					
					Loop, % TBL[a].columns {
						lcat:= "labelcol" . A_Index
						lval:= TBL[a][lcat]
						db_xml .= Build_XML(lcat, lval, "s", "0")
					}
					
					db_xml .= Build_XML("locked", TBL[a].locked, "n", "0")
					db_xml .= Build_XML("mod", TBL[a].dicemodifier, "n", "0")
					db_xml .= Build_XML("name", TBL[a].name, "s", "0")
					db_xml .= TBL[a].notes Chr(10)
					db_xml .= Build_XML("output", TBL[a].output, "s", "0")
					db_xml .= Build_XML("resultscols", TBL[a].columns, "n", "0")
					db_xml .= Build_XML("table_positionoffset", "0", "n", "0")

					db_xml .= tag("tablerows", 4) Chr(10)
					Loop, % TBL[a].rows {
						rowv:= A_Index
						db_xml .= tag(Format("id-{:05}", A_Index), 5) Chr(10)
						db_xml .= Build_XML("fromrange", TBL[a]["arr" A_Index][1], "n", "2")
						db_xml .= tag("results", 6) Chr(10)
						
						Loop, % TBL[a].columns {
							db_xml .= tag(Format("id-{:05}", A_Index), 7) Chr(10)
						
;{ Check for links in each cell				
							celllink:= 0
							thisthing:= TBL[a]["arr" rowv][A_Index + 2]
							FoundPos:= RegExMatch(thisthing, "OU)\[z?link\]Table: (.*)@(.*) - (.*)\[/z?link\]", linkz)
							if foundpos {
								celllink:= 1
								linkobject:= linkz.1
								linkpath:= linkz.2
								linkname:= linkz.3
								linkclass:= "table"
								if (linkpath = modname) {
									rcrdnm:= "tables." linkobject 
								} else {
									rcrdnm:= "tables." linkobject "@" linkpath
								}
							}
							FoundPos:= RegExMatch(thisthing, "OU)\[z?link\]Image: (.*)@(.*) - (.*)\[/z?link\]", linkz)
							if foundpos {
								celllink:= 1
								linkobject:= linkz.1
								linkpath:= linkz.2
								linkname:= linkz.3
								linkclass:= "imagewindow"
								if (linkpath = modname) {
									rcrdnm:= "image.img_" linkobject "_jpg" 
								} else {
									rcrdnm:= "image.img_" linkobject "_jpg@" linkpath
								}
							}
							FoundPos:= RegExMatch(thisthing, "OU)\[z?link\]NPC: (.*)@(.*) - (.*)\[/z?link\]", linkz)
							if foundpos {
								celllink:= 1
								linkobject:= linkz.1
								linkpath:= linkz.2
								linkname:= linkz.3
								linkclass:= "npc"
								if (linkpath = modname) {
									rcrdnm:= "reference.npcdata." linkobject 
								} else {
									rcrdnm:= "reference.npcdata." linkobject "@" linkpath
								}
							}
							FoundPos:= RegExMatch(thisthing, "OU)\[z?link\]Spell: (.*)@(.*) - (.*)\[/z?link\]", linkz)
							if foundpos {
								celllink:= 1
								linkobject:= linkz.1
								linkpath:= linkz.2
								linkname:= linkz.3
								linkclass:= "power"
								if (linkpath = modname) {
									rcrdnm:= "reference.spelldata." linkobject 
								} else {
									rcrdnm:= "reference.spelldata." linkobject "@" linkpath
								}
							}
							FoundPos:= RegExMatch(thisthing, "OU)\[z?link\]Table: (.*)@(.*) - (.*)\[/z?link\]", linkz)
							if foundpos {
								celllink:= 1
								linkobject:= linkz.1
								linkpath:= linkz.2
								linkname:= linkz.3
								linkclass:= "table"
								if (linkpath = modname) {
									rcrdnm:= "tables." linkobject 
								} else {
									rcrdnm:= "tables." linkobject "@" linkpath
								}
							}
							FoundPos:= RegExMatch(thisthing, "OU)\[z?link\]Parcel: (.*)@(.*) - (.*)\[/z?link\]", linkz)
							if foundpos {
								celllink:= 1
								linkobject:= linkz.1
								linkpath:= linkz.2
								linkname:= linkz.3
								linkclass:= "treasureparcel"
								if (linkpath = modname) {
									rcrdnm:= "treasureparcels." linkobject 
								} else {
									rcrdnm:= "treasureparcels." linkobject "@" linkpath
								}
							}
							FoundPos:= RegExMatch(thisthing, "OU)\[z?link\]Item: (.*)@(.*) - (.*)\[/z?link\]", linkz)
							if foundpos {
								celllink:= 1
								linkobject:= linkz.1
								linkpath:= linkz.2
								linkname:= linkz.3
								linkclass:= "item"
								if (linkpath = modname) {
									rcrdnm:= "item." linkobject 
								} else {
									rcrdnm:= "item." linkobject "@" linkpath
								}
							}
							
							if celllink {
								db_xml .= Build_XML("result", linkname, "s", "4")
								db_xml .= tag("resultlink type=""windowreference""", 8) Chr(10)
								db_xml .= Build_XML("class", linkclass, "", "5")
								db_xml .= Build_XML("recordname", rcrdnm, "", "5")
							} else {
								db_xml .= Build_XML("result", thisthing, "s", "4")
								db_xml .= tag("resultlink type=""windowreference""", 8) Chr(10)
								db_xml .= Build_XML("class", "", "", "5")
								db_xml .= Build_XML("recordname", "", "", "5")
							}
							
							db_xml .= tag("/resultlink", 8) Chr(10)
							db_xml .= tag(Format("/id-{:05}", A_Index), 7) Chr(10)
						}
;}

						db_xml .= tag("/results", 6) Chr(10)
						if (TBL[a]["arr" A_Index][2])
							db_xml .= Build_XML("torange", TBL[a]["arr" A_Index][2], "n", "2")
						db_xml .= tag(Format("/id-{:05}", A_Index), 5) Chr(10)
					}
					
					db_xml .= tag("/tablerows", 4) Chr(10)
					db_xml .= tag("/" a, 3) Chr(10)
				}
			}
			db_xml .= tag("/category", 2) Chr(10)
		}
		log("Tables section completed successfully.", 1, "green", "B")
	}
}

xml_library() {
	global
	
	log("Building Library section", 0, "purple")
	db_xml .= tag(XC(ModName) "library", 2) Chr(10)
	db_xml .= Build_XML("name", ModName, "s", "-1")
	db_xml .= Build_XML("categoryname", ModCate, "s", "-1")
	db_xml .= tag("entries", 3) Chr(10)
	if ModRefMn {
		db_xml .= tag("r01referencemanual", 4) Chr(10)
		db_xml .= tag("librarylink type=""windowreference""", 5) Chr(10)
		db_xml .= Build_XML("class", "reference_manual", "", "2")
		db_xml .= Build_XML("recordname", "reference.referencemanual", "", "2")
		db_xml .= tag("/librarylink", 5) Chr(10)
		db_xml .= Build_XML("name", "Reference Manual", "s", "1")
		db_xml .= tag("/r01referencemanual", 4) Chr(10)
	}
	if ModEquip {
		db_xml .= tag("r07equipment", 4) Chr(10)
		db_xml .= tag("librarylink type=""windowreference""", 5) Chr(10)
		db_xml .= Build_XML("class", "referenceindex", "", "2")
		db_xml .= Build_XML("recordname", "reference.equipmentlists.equipment", "", "2")
		db_xml .= tag("/librarylink", 5) Chr(10)
		db_xml .= Build_XML("name", "Equipment", "s", "1")
		db_xml .= tag("/r07equipment", 4) Chr(10)
	}
	if ModSpell {
		db_xml .= tag("r08spells", 4) Chr(10)
		db_xml .= tag("librarylink type=""windowreference""", 5) Chr(10)
		db_xml .= Build_XML("class", "referenceindex", "", "2")
		db_xml .= Build_XML("recordname", "lists.spells.spelllists", "", "2")
		db_xml .= tag("/librarylink", 5) Chr(10)
		db_xml .= Build_XML("name", "Spells", "s", "1")
		db_xml .= tag("/r08spells", 4) Chr(10)
	}
	If ModMonst {
		db_xml .= tag("r09monsters", 4) Chr(10)
		db_xml .= tag("librarylink type=""windowreference""", 5) Chr(10)
		db_xml .= Build_XML("class", "referenceindexsorted", "", "2")
		db_xml .= Build_XML("recordname", "lists.monsters.sortlist", "", "2")
		db_xml .= tag("/librarylink", 5) Chr(10)
		db_xml .= Build_XML("name", "NPCs", "s", "1")
		db_xml .= tag("/r09monsters", 4) Chr(10)
	}
	If ModTable {
		db_xml .= tag("r11tables", 4) Chr(10)
		db_xml .= tag("librarylink type=""windowreference""", 5) Chr(10)
		db_xml .= Build_XML("class", "reference_list", "", "2")
		db_xml .= Build_XML("recordname", "..", "", "2")
		db_xml .= tag("/librarylink", 5) Chr(10)
		db_xml .= Build_XML("name", "Tables", "s", "1")
		db_xml .= Build_XML("recordtype", "table", "s", "1")
		db_xml .= tag("/r11tables", 4) Chr(10)
	}
	db_xml .= tag("/entries", 3) Chr(10)
	db_xml .= tag("/" XC(ModName) "library", 2) Chr(10)
	log("Library section completed successfully.", 0, "green")
}



Build_XML(XTag, XData, XType:= "", XLev:= "1") {
	FileLine:= ""
	If (Xtype = "n") {
		Xtype:= " type=""number"""
	} else if (Xtype = "s") {
		Xtype:= " type=""string"""
	} else if (Xtype = "t") {
		Xtype:= " type=""token"""
	} else if (Xtype = "f") {
		Xtype:= " type=""formattedtext"""
	} else if (Xtype = "d") {
		Xtype:= " type=""dice"""
	} else if (Xtype = "") {
		Xtype:= ""
	}
	
	XLev += 4
	Loop, %XLev%
		FileLine .= "`t"
	
	XData:= validate(XData)	
	FileLine .=  "<" XTag XType ">" XData "</" XTag ">" Chr(10)
	Return FileLine
}

Tag(Xtag, Xlev:="1") {
	Loop, %XLev%
		FileLine .= "`t"

	FileLine .=  "<" XTag ">"
	Return FileLine
}



SpLlist() {
	
	sortlist =
	(
	
`t`t`t<spelllists>
`t`t`t`t<name type="string">Spells</name>
`t`t`t`t<index>
`t`t`t`t`t<r0spellindex>
`t`t`t`t`t`t<name type="string">(Spell Index)</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_list</class>
`t`t`t`t`t`t`t<recordname>..</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t`t<recordtype type="string">spell</recordtype>
`t`t`t`t`t</r0spellindex>
`t`t`t`t`t<r1byclass>
`t`t`t`t`t`t<name type="string">Spells by Class</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>referenceindex</class>
`t`t`t`t`t`t`t<recordname>lists.spells.byclass</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</r1byclass>
`t`t`t`t</index>
`t`t`t</spelllists>
	)

	StringReplace, sortlist, sortlist, `n, 
	sortlist .= Chr(10)
	return sortlist
	
}

Llist() {
	global GMTerr, GMMyth
	
	sortlist1 =
	(
	
`t`t`t<sortlist>
`t`t`t`t<name type="string">NPCs</name>
`t`t`t`t<index>
`t`t`t`t`t<id01>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_colindex</class>
`t`t`t`t`t`t`t<recordname>lists.monsters.byletter</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t`t<name type="string">NPCs - Alphabetical Index</name>
`t`t`t`t`t</id01>
`t`t`t`t`t<id02>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_colindex</class>
`t`t`t`t`t`t`t<recordname>lists.monsters.bycr</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t`t<name type="string">NPCs - Challenge Rating Index</name>
`t`t`t`t`t</id02>
`t`t`t`t`t<id03>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_colindex</class>
`t`t`t`t`t`t`t<recordname>lists.monsters.bytype</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t`t<name type="string">NPCs - Class Index</name>
`t`t`t`t`t</id03>
	)
	
	sortlist2 =
	(
	
`t`t`t`t`t<id04>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_colindex</class>
`t`t`t`t`t`t`t<recordname>lists.monsters.byterrain</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t`t<name type="string">NPCs - Terrain Type Index</name>
`t`t`t`t`t</id04>
	)

	sortlist3 =
	(
	
`t`t`t`t`t<id05>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_colindex</class>
`t`t`t`t`t`t`t<recordname>lists.monsters.bymythology</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t`t<name type="string">NPCs - Mythology Index</name>
`t`t`t`t`t</id05>
	)

	sortlistEnd =
	(
	
`t`t`t`t</index>
`t`t`t</sortlist>
	)

	sortlist:= sortlist1
	If GMTerr
		sortlist .= sortlist2
	If GMMyth
		sortlist .= sortlist3
	sortlist .= sortlistEnd
	
	StringReplace, sortlist, sortlist, `n, 
	sortlist .= Chr(10)
	return sortlist
}

EQE_Llist() {
	global XMLTypeList, EQP
	BuildTypeList(EQP.object())
	
	slA =
	(
	
`t`t`t<equipment>
`t`t`t`t<name type="string">Equipment</name>
`t`t`t`t<index>
	)
	
	sl1 =
	(
	
`t`t`t`t`t<id-00001>
`t`t`t`t`t`t<name type="string">Adventuring Gear</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_adventuringgeartable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.adventuringgeartable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00001>
	)
	
	sl2 =
	(
	
`t`t`t`t`t<id-00002>
`t`t`t`t`t`t<name type="string">Armor</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_armortable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.armortable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00002>
	)
	
	sl3 =
	(
	
`t`t`t`t`t<id-00003>
`t`t`t`t`t`t<name type="string">Weapons</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_weapontable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.weapontable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00003>
	)
	
	sl4 =
	(
	
`t`t`t`t`t<id-00004>
`t`t`t`t`t`t<name type="string">Tools</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_adventuringgeartable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.toolstable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00004>
	)
	
	sl5 =
	(
	
`t`t`t`t`t<id-00005>
`t`t`t`t`t`t<name type="string">Mounts and Other Animals</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_mountsandotheranimalstable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.mountsandotheranimalstable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00005>
	)
	
	sl6 =
	(
	
`t`t`t`t`t<id-00006>
`t`t`t`t`t`t<name type="string">Tack, Harness, and Drawn Vehicles</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_adventuringgeartable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.tackharnesstable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00006>
	)
	
	sl7 =
	(
	
`t`t`t`t`t<id-00007>
`t`t`t`t`t`t<name type="string">Waterborne Vehicles</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_waterbornevehiclestable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.waterbornevehiclestable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00007>
	)
	
	sl8 =
	(
	
`t`t`t`t`t<id-00008>
`t`t`t`t`t`t<name type="string">Treasure</name>
`t`t`t`t`t`t<listlink type="windowreference">
`t`t`t`t`t`t`t<class>reference_adventuringgeartable</class>
`t`t`t`t`t`t`t<recordname>reference.equipmentlists.treasuretable</recordname>
`t`t`t`t`t`t</listlink>
`t`t`t`t`t</id-00008>
	)
	
	slB =
	(
	
`t`t`t`t</index>
`t`t`t</equipment>
	)

	sortlist:= slA
	if HasVal(XMLTypeList, "Adventuring Gear")
		sortlist .= sl1
	if HasVal(XMLTypeList, "Armor")
		sortlist .= sl2
	if HasVal(XMLTypeList, "Weapon")
		sortlist .= sl3
	if HasVal(XMLTypeList, "Tools")
		sortlist .= sl4
	if HasVal(XMLTypeList, "Mounts and Other Animals")
		sortlist .= sl5
	if HasVal(XMLTypeList, "Tack, Harness, and Drawn Vehicles")
		sortlist .= sl6
	if HasVal(XMLTypeList, "Waterborne Vehicles")
		sortlist .= sl7
	if HasVal(XMLTypeList, "Treasure")
		sortlist .= sl8
	sortlist .= slB
	
	StringReplace, sortlist, sortlist, `n, 
	sortlist .= Chr(10)

	return sortlist
	
}



cr(Group_title, ObjSelect) {
	Global
	GroupMembers:= 0
	For a, b in NPC.Object()
	{
		if (NPC[a].cr = ObjSelect) {
			If !GroupMembers
				log("Adding Group CR " ObjSelect ".", 3)		
			GroupMembers:= 1
		}
	}
	If GroupMembers {
		db_xml .= tag(Format("id-{:05}", Group_title), 5) Chr(10)
		db_xml .= Build_XML("description", "CR " ObjSelect, "s", "2")
		db_xml .= tag("index", 6) Chr(10)
		For a, b in NPC.Object()
		{
			if (NPC[a].cr = ObjSelect) {
				db_xml .= tag(a, 7) Chr(10)
				db_xml .= Build_XML("name", NPC[a].name, "s", "4")
				db_xml .= tag("link type=""windowreference""", 8) Chr(10)
				db_xml .= Build_XML("class", "npc", "", "5")
				db_xml .= Build_XML("recordname", "reference.npcdata." XC(a), "", "5")
				db_xml .= tag("/link", 8) Chr(10)
				db_xml .= tag("/" a, 7) Chr(10)
			}
		}	
		db_xml .= tag("/index", 6) Chr(10)
		db_xml .= tag("/" Format("id-{:05}", Group_title), 5) Chr(10)
	}
}

tp(Group_title, ObjSelect) {
	Global
	GroupMembers:= 0
	For a, b in NPC.Object()
	{
		if (NPC[a].type ~= "^" ObjSelect) {
			If !GroupMembers
				log("Adding Group Type " ObjSelect ".", 3)		
			GroupMembers:= 1
		}
	}
	If GroupMembers {
		db_xml .= tag(Format("id-{:05}", Group_title), 5) Chr(10)
		db_xml .= Build_XML("description", ObjSelect, "s", "2")
		db_xml .= tag("index", 6) Chr(10)
		For a, b in NPC.Object()
		{
			if (NPC[a].type ~= "^" ObjSelect) {
				db_xml .= tag(a, 7) Chr(10)
				db_xml .= Build_XML("name", NPC[a].name, "s", "4")
				db_xml .= tag("link type=""windowreference""", 8) Chr(10)
				db_xml .= Build_XML("class", "npc", "", "5")
				db_xml .= Build_XML("recordname", "reference.npcdata." XC(a), "", "5")
				db_xml .= tag("/link", 8) Chr(10)
				db_xml .= tag("/" a, 7) Chr(10)
			}
		}	
		db_xml .= tag("/index", 6) Chr(10)
		db_xml .= tag("/" Format("id-{:05}", Group_title), 5) Chr(10)
	}
}

tr(Group_title, ObjSelect) {
	Global
	GroupMembers:= 0
	For a, b in NPC.Object()
	{
		if (InStr(NPC[a].terrain, ObjSelect)) {
			If !GroupMembers
				log("Adding Group Type " ObjSelect ".", 3)		
			GroupMembers:= 1
		}
	}
	If GroupMembers {
		db_xml .= tag(Format("id-{:05}", Group_title), 5) Chr(10)
		db_xml .= Build_XML("description", ObjSelect, "s", "2")
		db_xml .= tag("index", 6) Chr(10)
		For a, b in NPC.Object()
		{
			if (InStr(NPC[a].terrain, ObjSelect)) {
				db_xml .= tag(a, 7) Chr(10)
				db_xml .= Build_XML("name", NPC[a].name, "s", "4")
				db_xml .= tag("link type=""windowreference""", 8) Chr(10)
				db_xml .= Build_XML("class", "npc", "", "5")
				db_xml .= Build_XML("recordname", "reference.npcdata." XC(a), "", "5")
				db_xml .= tag("/link", 8) Chr(10)
				db_xml .= tag("/" a, 7) Chr(10)
			}
		}	
		db_xml .= tag("/index", 6) Chr(10)
		db_xml .= tag("/" Format("id-{:05}", Group_title), 5) Chr(10)
	}
}

ol(Group_title, ObjSelect) {
	Global
	GroupMembers:= 0
	For a, b in NPC.Object()
	{
		if (InStr(NPC[a].lore, ObjSelect)) {
			If !GroupMembers
				log("Adding Group Type " ObjSelect ".", 3)		
			GroupMembers:= 1
		}
	}
	If GroupMembers {
		db_xml .= tag(Format("id-{:05}", Group_title), 5) Chr(10)
		db_xml .= Build_XML("description", ObjSelect, "s", "2")
		db_xml .= tag("index", 6) Chr(10)
		For a, b in NPC.Object()
		{
			if (InStr(NPC[a].lore, ObjSelect)) {
				db_xml .= tag(a, 7) Chr(10)
				db_xml .= Build_XML("name", NPC[a].name, "s", "4")
				db_xml .= tag("link type=""windowreference""", 8) Chr(10)
				db_xml .= Build_XML("class", "npc", "", "5")
				db_xml .= Build_XML("recordname", "reference.npcdata." XC(a), "", "5")
				db_xml .= tag("/link", 8) Chr(10)
				db_xml .= tag("/" a, 7) Chr(10)
			}
		}	
		db_xml .= tag("/index", 6) Chr(10)
		db_xml .= tag("/" Format("id-{:05}", Group_title), 5) Chr(10)
	}
}

ca(Group_title, ObjSelect) {
	Global
	ObjSel2:= XC(ObjSelect)
	
	GroupMembers:= 0
	For a, b in SPL.Object()
	{
		SPL[a].source:= SPL[a].source ","
		if (InStr(SPL[a].source, ObjSelect ",")) {
			If !GroupMembers {
				log("Adding Group Type " ObjSelect ".", 3)
				GroupMem.push(ObjSelect)
			}
			GroupMembers:= 1
		}
	}
	If GroupMembers {
		For a, b in SPL.Object()
		{
			if (InStr(SPL[a].source, ObjSelect ",")) {
				db_xml .= tag(ObjSel2, 5) Chr(10)
				db_xml .= Build_XML("name", ObjSelect, "s", "2")
				db_xml .= tag("listlink type=""windowreference""", 6) Chr(10)
				db_xml .= Build_XML("class", "reference_colindex", "", "3")
				db_xml .= Build_XML("recordname", "lists.spells.byclass." ObjSel2, "", "3")
				db_xml .= tag("/listlink", 6) Chr(10)
				db_xml .= tag("/" ObjSel2, 5) Chr(10)
			}
		}	
	}
}

sl(Group_title, ObjSelect, castah) {
	Global
	Objsel2:= SubStr(ObjSelect,1,1)
	If (Objsel2 = "c")
		Objsel2:= "0"
	Objsel2:= "level" Objsel2
	
	GroupMembers:= 0
	For a, b in SPL.Object()
	{
		if (SPL[a].level = ObjSelect) AND (InStr(SPL[a].source, castah ",")) {
			GroupMembers:= 1
		}
	}
	If GroupMembers {
		db_xml .= tag(Objsel2, 6) Chr(10)
		db_xml .= Build_XML("description", Group_title, "s", "3")
		db_xml .= tag("index", 7) Chr(10)
		For a, b in SPL.Object()
		{
			if (SPL[a].level = ObjSelect) AND (InStr(SPL[a].source, castah ",")) {
				db_xml .= tag(a, 8) Chr(10)
				db_xml .= tag("link type=""windowreference""", 9) Chr(10)
				db_xml .= Build_XML("class", "reference_spell", "", "6")
				db_xml .= Build_XML("recordname", "reference.spelldata." a, "", "6")
				db_xml .= tag("/link", 9) Chr(10)
				db_xml .= tag("/" a, 8) Chr(10)
			}
		}	
		db_xml .= tag("/index", 7) Chr(10)
		db_xml .= tag("/" Objsel2, 6) Chr(10)
	}
}


BuildCatList(obj) {
	global
	XMLCatList:= []
	For a, b in obj {
		if !obj[a].FGCat
			obj[a].FGCat:= Modname
		XMLCatList.push(obj[a].FGCat)
	}
	XMLCatList:= TrimArray(XMLCatList)
}

BuildTypeList(obj) {
	global
	XMLTypeList:= []
	For a, b in obj {
		XMLTypeList.push(obj[a].type)
	}
	XMLTypeList:= TrimArray(XMLTypeList)
}

BuildSubTypeList(obj, typ) {
	global
	XMLSubTypeList:= []
	For a, b in obj {
		if (obj[a].type = typ)
			XMLSubTypeList.push(obj[a].subtype)
	}
	XMLSubTypeList:= TrimArray(XMLSubTypeList)
}


refmantp(Group_title, ObjSelect) {
	Global
	RM_NPCIndex2 =
(
											<h>&#13;%Objselect%</h>
										
)
	RM_NPCIndex2:= "`t`t`t`t`t`t`t`t`t`t`t`t" RM_NPCIndex2

	GroupMembers:= 0
	For a, b in NPC.Object()
	{
		if (NPC[a].type ~= "^" ObjSelect) {
			If !GroupMembers
				RMNPCIndex .= RM_NPCIndex2
			GroupMembers:= 1
		}
	}
	If GroupMembers {
		For a, b in NPC.Object()
		{
			if (NPC[a].type ~= "^" ObjSelect) {
				a_name:= NPC[a].name
				stringreplace, a_name, a_name, &, `&amp`;, All
				RM_NPCIndex3 =
(
										<link class="referencemanualpage" recordname="reference.referencemanual.chapters.chapter_00.subchapters.subchapter_30.refpages.xx-%a%@%modname%">%a_name%</link>
										
)
				RM_NPCIndex3:= "`t`t`t`t`t`t`t`t`t`t`t`t" RM_NPCIndex3

				RMNPCIndex .= RM_NPCIndex3

			}
		}	
	}
}

Calculate_Split() {
	global
	Local targ, diff, half, running

	running:= 0
	Loop, 14 {
		ObjGroup[A_Index].number:= CalcSplitCount(ObjGroup[A_Index].name)
		running += ObjGroup[A_Index].number
	}

	targ:= 0
	half:= running / 2
	diff:= running / 2
	res:= 0
	loop, 14
	{
		targ +=ObjGroup[A_Index].number
		if (abs(targ - half) < diff) {
			diff:= abs(targ - half)
			res:= A_Index
		}
	}
	If (res = 0)
		res:= 1
	
	loop, 14
	{
		If (A_Index > res) {
			ObjGroup[A_Index].column:= 2
		} else {
			ObjGroup[A_Index].column:= 1
		}
	}
}

CalcSplitCount(ObjSelect) {
	Global
	local grm
	grm:= 0
	For a, b in NPC.Object()
	{
		if (NPC[a].type ~= "^" ObjSelect) {
			grm++
		}
	}
	return grm
}

